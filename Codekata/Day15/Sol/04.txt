import java.util.Scanner;

public class UniquePathsDP {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int n = sc.nextInt();
        int[][] dp = new int[m][n];

        // Initialize first row and first column
        for (int i = 0; i < m; i++) dp[i][0] = 1;
        for (int j = 0; j < n; j++) dp[0][j] = 1;

        // Fill the dp table
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }

        System.out.println(dp[m-1][n-1]);
    }
}

----------------------------------

Detailed step-by-step explanation of the code:

```java
// Initialize first row and first column
for (int i = 0; i < m; i++) dp[i][0] = 1;
for (int j = 0; j < n; j++) dp[0][j] = 1;

// Fill the dp table
for (int i = 1; i < m; i++) {
    for (int j = 1; j < n; j++) {
        dp[i][j] = dp[i-1][j] + dp[i][j-1];
    }
}

System.out.println(dp[m-1][n-1]);
```

High-Level Overview

This code is a classic dynamic programming solution to the "Unique Paths" problem:  
Given an `m x n` grid, how many unique ways are there to go from the top-left corner to the bottom-right corner, moving only right or down at each step?

Step-by-Step Explanation

1. Initialization of the DP Table

- `dp` is a 2D array (`m x n`) where `dp[i][j]` will store the number of unique paths to reach cell `(i, j)` from `(0, 0)`.

```java
for (int i = 0; i < m; i++) dp[i][0] = 1;
for (int j = 0; j < n; j++) dp[0][j] = 1;
```
- First loop: Sets all cells in the first column (`dp[i][0]`) to 1.  
  - Why? You can only move down to reach any cell in the first column, so there's only one way to get there.
- Second loop: Sets all cells in the first row (`dp[0][j]`) to 1.  
  - Why? You can only move right to reach any cell in the first row, so again, only one way.

2. Filling the DP Table

```java
for (int i = 1; i < m; i++) {
    for (int j = 1; j < n; j++) {
        dp[i][j] = dp[i-1][j] + dp[i][j-1];
    }
}
```
- For each cell not in the first row or column:
  - The number of ways to reach `dp[i][j]` is the sum of:
    - Ways to reach the cell above it: `dp[i-1][j]`
    - Ways to reach the cell to the left: `dp[i][j-1]`
- This is because you can only arrive at `(i, j)` from either `(i-1, j)` (down move) or `(i, j-1)` (right move).

3. Output the Result

```java
System.out.println(dp[m-1][n-1]);
```
- Prints the number of unique paths to the bottom-right corner of the grid.

---

Example

Suppose `m = 3`, `n = 3` (a 3x3 grid):

- After initialization:
  ```
  1 1 1
  1 0 0
  1 0 0
  ```
- After filling:
  ```
  1 1 1
  1 2 3
  1 3 6
  ```
- Output: `6` (There are 6 unique paths from top-left to bottom-right).

---

Key Concepts

- Dynamic Programming: Breaking the problem into subproblems and building up the solution.
- Base Cases: First row and column are always 1.
- Recurrence Relation: `dp[i][j] = dp[i-1][j] + dp[i][j-1]`

---

Gotchas

- Make sure `dp` is initialized with the correct size (`m x n`).
- Indices start at 0, so the bottom-right cell is `dp[m-1][n-1]`.
