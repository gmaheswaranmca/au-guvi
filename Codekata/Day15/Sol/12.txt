import java.util.*;

public class ActivitySelection {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] activities = new int[n][2];
        for (int i = 0; i < n; i++) {
            activities[i][0] = sc.nextInt();
            activities[i][1] = sc.nextInt();
        }
        Arrays.sort(activities, Comparator.comparingInt(a -> a[1]));
        int count = 0, lastEnd = -1;
        for (int[] act : activities) {
            if (act[0] >= lastEnd) {
                count++;
                lastEnd = act[1];
            }
        }
        System.out.println(count);
    }
}

----------------------------------

Detailed step-by-step explanation of the code:

1. Importing Required Classes
```java
import java.util.*;
```
- Imports all classes from the `java.util` package, including `Scanner` and `Arrays`.

---

2. Class and Main Method Declaration
```java
public class ActivitySelection {
    public static void main(String[] args) {
        // ...
    }
}
```
- Defines a public class named `ActivitySelection`.
- The `main` method is the program’s entry point.

---

3. Reading Input
```java
Scanner sc = new Scanner(System.in);
int n = sc.nextInt();
int[][] activities = new int[n][2];
for (int i = 0; i < n; i++) {
    activities[i][0] = sc.nextInt();
    activities[i][1] = sc.nextInt();
}
```
- Creates a `Scanner` to read input from the console.
- Reads an integer `n`, the number of activities.
- Declares a 2D array `activities` of size `n x 2` to store start and end times.
- For each activity, reads two integers: start time and end time, storing them in the array.

---

4. Sorting Activities by End Time
```java
Arrays.sort(activities, Comparator.comparingInt(a -> a[1]));
```
- Sorts the `activities` array in ascending order based on the end time (`a[1]`) of each activity.
- This is crucial for the greedy algorithm to select the maximum number of non-overlapping activities.

---

5. Selecting Activities (Greedy Algorithm)
```java
int count = 0, lastEnd = -1;
for (int[] act : activities) {
    if (act[0] >= lastEnd) {
        count++;
        lastEnd = act[1];
    }
}
```
- Initializes `count` to 0 (number of selected activities) and `lastEnd` to -1 (end time of the last selected activity).
- Iterates through each activity:
    - If the activity’s start time (`act[0]`) is greater than or equal to `lastEnd`, it means the activity does not overlap with the previously selected one.
    - Increments `count` and updates `lastEnd` to the current activity’s end time.

---

6. Outputting the Result
```java
System.out.println(count);
```
- Prints the maximum number of non-overlapping activities that can be selected.

---

Key Concepts
- Greedy Algorithm: Always picks the next activity with the earliest end time that doesn't overlap with previously selected activities.
- Sorting: Sorting by end time is essential for the greedy choice to be optimal.
- Input Handling: Uses a 2D array to store pairs of start and end times.

---

Gotchas
- The initial value of `lastEnd` is `-1` to ensure the first activity is always considered.
- The code assumes input is well-formed (no error handling for invalid input).

---

Example

Input:
```
3
1 3
2 5
4 6
```
Output:
```
2
```
Explanation: Activities (1,3) and (4,6) can be selected without overlap.

----------------------------------