Binary Search Tree (BST)
    Definition of Binary Search Tree (BST):
        A Binary Search Tree (BST) is 
        a special type of binary tree where:
            * The left subtree of a node contains 
              only nodes with values less than the node’s value.
            * The right subtree of a node contains only nodes 
              with values greater than the node’s value.
            * Both left and right subtrees must also be Binary Search Trees.

        This property makes BSTs efficient for searching, inserting, and deleting data.

    Terminologies in Binary Search Tree (BST):
        | Term              | Description                                                                   |
        | ----------------- | ----------------------------------------------------------------------------- |
        | Node              | Basic element holding data and links to left and right children.              |
        | Root              | The topmost node in the BST.                                                  |
        | Parent            | A node that has one or more child nodes.                                      |
        | Child             | A node descending from a parent.                                              |
        | Left Child        | The node connected to the left link; holds a smaller value than its parent.   |
        | Right Child       | The node connected to the right link; holds a greater value than its parent.  |
        | Leaf Node         | A node with no children.                                                      |
        | Subtree           | A tree formed from a node and its descendants.                                |
        | Inorder Traversal | Left → Root → Right traversal; returns nodes in sorted (ascending) order.     |
        | Height            | The length of the longest path from a node to a leaf.                         |
        | Depth             | The number of edges from the root to the node.                                |
        | Balanced BST      | A BST where the height difference between left and right subtrees is minimal. |
        | Unbalanced BST    | A BST skewed to one side (left or right), degrading performance to O(n).      |
        | Successor         | The smallest node in the right subtree (used in deletion).                    |
        | Predecessor       | The largest node in the left subtree.                                         |

    Example of a Binary Search Tree:
            ```
                50
                /  \
              30    70
             / \    / \
           20  40  60  80
            ```
        * Node `30` is left of `50`, and all of its descendants (`20`, `40`) are < `50`.
        * Node `70` is right of `50`, and its descendants (`60`, `80`) are > `50`.

    Example 
        Example 1: Simple BST
        ```
              40
             /  \
           20    60
          / \    / \
        10  30  50  70
        ```
        * Left subtree: All values < 40
        * Right subtree: All values > 40
        * Inorder Traversal: `10 20 30 40 50 60 70` (sorted order)

        Example 2: BST Built from [50, 30, 70, 20, 40, 60, 80]
        ```
             50
            /  \
         30    70
        / \    / \
      20  40  60  80
        ```
        * Inserted in the order: 
          root = 50, then 30 (left), 70 (right), and so on 
          maintaining BST property.

        Example 3: Skewed BST (Right-Skewed)
        ```
            10
             \
              20
                \
                30
                  \
                  40
        ```
        * Happens when elements are inserted in increasing order.
        * Worst-case BST (like a linked list), time complexities degrade to O(n).

        Example 4: Skewed BST (Left-Skewed)
        ```
                40
               /
              30
             /
            20
           /
          10
        ```

        * Happens with decreasing order inserts.

    Common Operations on BST:
        | Operation     | Time Complexity (Average Case)     | Purpose                               |
        | ------------- | ---------------------------------- | ------------------------------------- |
        | Search        | O(log n)                           | Find if a value exists                |
        | Insertion     | O(log n)                           | Add a new node                        |
        | Deletion      | O(log n)                           | Remove a node and rearrange           |
        | Traversals    | O(n)                               | Inorder (sorted), Preorder, Postorder |

        > Note: If the BST becomes unbalanced 
          (e.g., like a linked list), 
          time complexity can degrade to O(n).


    Common Operations on a Binary Search Tree (BST)
        A Binary Search Tree allows 
        for efficient searching, insertion, and deletion 
        by maintaining the BST property:
        Left subtree < Node < Right subtree.

        | Operation          | Average Time Complexity     | Worst Case     | Purpose                                             |
        | ------------------ | --------------------------- | -------------- | --------------------------------------------------- |
        | Search             | O(log n)                    | O(n)           | Find whether a value exists in the tree.            |
        | Insertion          | O(log n)                    | O(n)           | Add a new node while maintaining BST property.      |
        | Deletion           | O(log n)                    | O(n)           | Remove a node and rearrange the tree.               |
        | Inorder Traversal  | O(n)                        | O(n)           | Visit nodes in sorted (ascending) order.            |
        | Preorder/Postorder | O(n)                        | O(n)           | Used for copying or deleting the tree.              |
        | Find Min/Max       | O(log n)                    | O(n)           | Go left-most (min) or right-most (max) in the tree. |
        | Find Successor     | O(log n)                    | O(n)           | Find the next higher value (used in deletion).      |
        | Height of Tree     | O(n)                        | O(n)           | Longest path from root to leaf.                     |
        | Is Balanced        | O(n)                        | O(n)           | Check if the tree is height-balanced.               |

        > ⚠ Worst-case happens when the BST becomes skewed (like a linked list), 
             especially with sorted input.