B-Tree 
    ✅ Definition: B-Tree
    A B-Tree is 
    a self-balancing, multi-way search tree 
    optimized for disk storage and fast access. 
    
    Unlike binary search trees (BSTs), 
    each node can have more than two children and 
    can store multiple keys, 
    making B-Trees ideal for systems 
    that read and write large blocks of data.

    📘 Terminologies in B-Tree
        | Term          | Description                                                                                                 |
        | ------------- | ----------------------------------------------------------------------------------------------------------- |
        | Order (t)     | Minimum degree; defines the range of children per node. A node has at most `2t` children and `2t - 1` keys. |
        | Node          | A structure that contains multiple keys and children pointers.                                              |
        | Root          | Topmost node; can have fewer than `t-1` keys.                                                               |
        | Internal Node | A node that is not a leaf and has at least two children.                                                    |
        | Leaf Node     | Node with no children; holds data or points to data blocks.                                                 |
        | Height        | The number of levels in the B-Tree.                                                                         |

    🌲 Key Properties of B-Tree (Order t)
        1. Every node can have at most `2t - 1` keys and `2t` children.
        2. Every node (except root) must have at least `t - 1` keys.
        3. All leaves appear at the same level (perfectly balanced).
        4. Keys in a node are stored in sorted order.
        5. Supports efficient search, insert, delete in O(log n) time.
        6. Grows and shrinks from the root, not the leaves.

    🌟 Qualities
        * Self-balancing: Automatically maintains balance on insert/delete.
        * Efficient for disk storage: Reduces disk I/O because of fewer levels.
        * Scalable: Suitable for huge datasets.
        * Can store more data per node than binary trees (due to multiple keys).

    🔧 Use Cases of B-Tree
        | Domain                          | Purpose                                   |
        | ------------------------------- | ----------------------------------------- |
        | Databases (MySQL, Oracle)       | Used in indexing large tables.            |
        | File systems (NTFS, HFS+, ext4) | Directory structure, file block mapping.  |
        | Operating Systems               | Virtual memory, page tables, etc.         |
        | Embedded systems                | Index storage in low-memory environments. |
        | Search Engines                  | Maintaining sorted indexes on disk.       |
    
    Examples 
        that illustrate B-Tree operations 
        like insertion and structure at different stages. 
        We'll use a B-Tree of order `t = 2` 
        (i.e., a node can have a maximum of `2t - 1 = 3 keys` and `2t = 4 children`).

        🌱 Start with empty B-Tree (`t = 2`)
            Insert: `10`
                ```
                [10]
                ```

        🌱 Insert: `20, 5`
            ```
            [5 10 20]
            ```

        🔀 Insert: `6` → Causes Split
            Now node has 4 keys (`5 6 10 20`), which exceeds `3`. So, split the node:
                * Middle key = `10` → goes up
                * Left = `[5 6]`, Right = `[20]`
            ```
                    [10]
                /    \
            [5 6]   [20]
            ```

        🌱 Insert: `12, 30, 7`
            * Insert `12`: goes to right child `[20]` → becomes `[12 20]`
            * Insert `30`: `[12 20 30]` (no split needed yet)
            * Insert `7`: goes to left child `[5 6]` → becomes `[5 6 7]` (still fine)
            ```
                    [10]
                /    \
            [5 6 7]  [12 20 30]
            ```

        ---

        ⚠️ Insert: `4` → Left node `[5 6 7]` becomes `[4 5 6 7]` → needs split
            * Mid = `6`, push to root. Root becomes `[6 10]`
            * Children: `[4 5]`, `[7]`, `[12 20 30]`
            ```
                    [6 10]
                    /   |    \
            [4 5]  [7]  [12 20 30]
            ```

        🧠 Observation
            * B-Tree grows in height only when the root splits.
            * All leaf nodes are always at the same level.
    ...

    Basic operations 
        on a B-Tree, especially for order `t` (minimum degree):

        1. 🔍 Search(key)
            * Goal: Find whether a key exists in the B-Tree.
            * Approach:
                * Start from the root, compare `key` with the keys in the node.
                * If not found and not a leaf, 
                  recursively search in the appropriate child.
            * Time Complexity: `O(log n)` (due to balanced structure)

        2. ➕ Insert(key)
            * Goal: Insert a key while maintaining B-Tree properties.
            * Steps:
                * Traverse down to the correct leaf node.
                * If full (i.e., contains `2t - 1` keys), split the node.
                * Promote the middle key to the parent.
                * Recursively split up if necessary (even the root).
            * Time Complexity: `O(log n)`

        3. ➖ Delete(key)
            * Goal: Remove a key and maintain B-Tree rules.
            * Cases:

            1. If the key is in a leaf, delete directly.
            2. If the key is in an internal node, replace it with:
                * The predecessor (max key in left subtree), or
                * The successor (min key in right subtree).
                * Then delete recursively from that subtree.
            3. If the child has < `t` keys, merge or borrow 
               to satisfy minimum key requirement.
            * Time Complexity: `O(log n)`
                > 🔧 Note: Deletion is more complex than 
                  insertion due to balancing requirements.

        4. 📏 Traverse()
            * Used to print or walk through the tree in sorted order.
            * In-order traversal: for every node, 
              visit child[i] → key[i] → child[i+1].

        5. 🧮 Split and Merge (Internal Operations)
            * Split: Occurs during insertion if a node is full.
            * Merge: Occurs during deletion 
              if two children each have less than `t` keys.

        Summary Table
            | Operation | Description                      | Time Complexity |
            | --------- | -------------------------------- | --------------- |
            | Search    | Find a key                       | `O(log n)`      |
            | Insert    | Add a key (with split if needed) | `O(log n)`      |
            | Delete    | Remove a key (may need merge)    | `O(log n)`      |
            | Traverse  | Sorted walk of all keys          | `O(n)`          |
