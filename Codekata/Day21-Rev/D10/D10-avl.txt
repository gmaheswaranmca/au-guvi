AVL Tree
    🔷 Definition:
        An AVL Tree is 
        a self-balancing Binary Search Tree (BST) 
        where the difference of heights (balance factor) 
        between the left and 
                right subtrees of every node is 
        at most 1.

        It is named after its inventors Adelson-Velsky and Landis.
    🔷 Key Terminologies:
        | Term                | Description                                                     |
        | ------------------- | --------------------------------------------------------------- |
        | Height              | Number of edges on the longest path from a node to a leaf.      |
        | Balance Factor      | `Balance Factor = height(left subtree) - height(right subtree)` |
        | Balanced Node       | A node is balanced if its balance factor is `-1`, `0`, or `1`.  |
        | Rotation            | A restructuring technique used to rebalance the tree.           |
        | Single Rotation     | One-time adjustment using Left or Right rotation.               |
        | Double Rotation     | Combination of two rotations (Left-Right or Right-Left).        |

    🔷 Types of Rotations (Used to Restore Balance):
        | Imbalance Type   | Rotation Needed     | Scenario Example              |
        | ---------------- | ------------------- | ----------------------------- |
        | LL (Left-Left)   | Right Rotation      | New node added to left-left   |
        | RR (Right-Right) | Left Rotation       | New node added to right-right |
        | LR (Left-Right)  | Left-Right Rotation | New node added to left-right  |
        | RL (Right-Left)  | Right-Left Rotation | New node added to right-left  |

    🔷 Properties:
        * Always balanced → guarantees `O(log n)` time for insertion, deletion, and search.
        * Suitable for applications where frequent insertions and deletions occur.

    🔷 Example 
        ✅ Example 1: Simple Balanced AVL Tree (No Rotation Needed)
            Inserting: `30 → 20 → 40`
                ```
                   30
                  /  \
                20    40
                ```

            * All nodes have balance factor `0` or `±1`, so no rotation needed.

        ✅ Example 2: LL (Left-Left) Rotation
            Inserting: `30 → 20 → 10`
            Before rotation:
                ```
                   30
                   /
                  20
                 /
                10
                ```

            Balance factor at node `30` = `2` (unbalanced)
            ➡ Apply Right Rotation on `30`.

            After rotation:
                ```
                  20
                 /   \
                10    30
                ```

        ✅ Example 3: RR (Right-Right) Rotation
            Inserting: `30 → 40 → 50`
            Before rotation:
                ```
                    30
                     \
                      40
                       \
                        50
                ```

            Balance factor at node `30` = `-2`
            ➡ Apply Left Rotation on `30`.

            After rotation:
                ```
                   40
                  /  \
                30    50
                ```

        ✅ Example 4: LR (Left-Right) Rotation
            Inserting: `30 → 10 → 20`
            Before rotation:
                ```
                    30
                   /
                 10
                   \
                    20
                ```

            Balance factor at `30` = `2`
            ➡ Apply Left Rotation on 10, then Right Rotation on 30

            After rotation:
                ```
                    20
                    /  \
                10    30
                ```

        ✅ Example 5: RL (Right-Left) Rotation
            Inserting: `30 → 50 → 40`
            Before rotation:
            ```
                30
                \
                50
                /
                40
            ```

            Balance factor at `30` = `-2`
            ➡ Apply Right Rotation on 50, then Left Rotation on 30

            After rotation:
                ```
                    40
                    /  \
                30    50
                ```

    ✅ How to Check if an AVL Tree Node is Unbalanced
        In an AVL tree, every node must satisfy the balance condition:
        > Balance Factor = `height(left subtree) - height(right subtree)`

        🔷 When is a node unbalanced?
            A node is considered unbalanced 
            if its balance factor is not in {-1, 0, +1}.
            | Balance Factor | Meaning                      | Status                   |
            | -------------- | ---------------------------- | -------------------------|
            | `0`            | Perfectly balanced           | ✅ Balanced              |
            | `+1` or `-1`   | Slightly heavier on one side | ✅ Balanced              |
            | `> +1`         | Too heavy on the left        | ❌ Unbalanced (LL or LR) |
            | `< -1`         | Too heavy on the right       | ❌ Unbalanced (RR or RL) |

      
        🔷 How to Check Balance Factor in Code (Python Example):
            ```python
            def get_height(node):
                if not node:
                    return 0
                return max(get_height(node.left), get_height(node.right)) + 1

            def get_balance_factor(node):
                if not node:
                    return 0
                return get_height(node.left) - get_height(node.right)

            def is_unbalanced(node):
                bf = get_balance_factor(node)
                return bf < -1 or bf > 1
            ```

        🔧 Example:
            If a node has:
                * Left subtree height = 3
                * Right subtree height = 1
                → Balance Factor = `3 - 1 = +2` → ❌ Unbalanced

    ✅ What is LL in AVL Trees?
        LL stands for Left-Left imbalance, 
        which occurs in an AVL Tree when:
            * A new node is inserted into 
              the left subtree of the left child of a node, and
            * This causes the balance factor of that ancestor node 
              to become greater than +1, making it left-heavy.

        🔷 When does LL happen?
            Example insertion: `30 → 20 → 10`
            ```
                 30
                /
               20
              /
             10
            ```

        Here:
            * Node `30` becomes unbalanced after inserting `10` 
              into the left of left child.
            * Balance factor of `30` becomes `+2` → LL case.


        🔷 How to fix LL imbalance?
            ✅ Apply a single Right Rotation on the unbalanced node (here, `30`).

            After right rotation:
            ```
                 20
                /  \
              10    30
            ```

            Now the tree is balanced.

        🔧 Rule of Thumb:
        > LL case = insert left of left → Right Rotation needed

    ✅ How to Fix an LL (Left-Left) Imbalance in an AVL Tree
        Once you've identified that a node is 
        unbalanced due to Left-Left (LL) insertion, you fix it using a Right Rotation.

        🔷 When does LL happen?
            You inserted into the left subtree of the left child of a node.
            For example: insert `30 → 20 → 10`

            ```
                30
               /
              20
             /
            10
            ```

            * Balance factor at `30` = `2` (unbalanced)
            * Left child `20` also has a left-heavy subtree ⇒ LL Case

            🔧 Fix: Perform a Right Rotation
                Let’s call the unbalanced node `z = 30`, its left child `y = 20`, and `y`’s left child `x = 10`.

        #🔁 Right Rotation Steps:
            ```plaintext
                 z (30)                     y (20)
                /                         /   \
               y (20)       →           x(10)  z(30)
              /   \                           /
             x(10) T3                        T3
            ```
 
        🔢 ✅ Code Snippet (Python-like Pseudocode)
            ```python
            def right_rotate(z):
                y = z.left
                T3 = y.right

                # Perform rotation
                y.right = z
                z.left = T3

                # Update heights (if maintaining)
                z.height = 1 + max(height(z.left), height(z.right))
                y.height = 1 + max(height(y.left), height(y.right))

                return y  # New root after rotation
            ```

        🔢 Java Version
            ```java
            Node rightRotate(Node z) {
                Node y = z.left;
                Node T3 = y.right;

                // Rotation
                y.right = z;
                z.left = T3;

                // Update heights
                z.height = Math.max(height(z.left), height(z.right)) + 1;
                y.height = Math.max(height(y.left), height(y.right)) + 1;

                return y; // New root after rotation
            }
            ```

    ✅ `RR` stands for Right-Right Rotation 
        — a specific type of imbalance that occurs when:

        > A node is inserted into 
          the right subtree of the right child of an unbalanced node.

        ✅ RR (Right-Right) Case – When It Happens

        This happens when:

        * You insert a node into the right of right, like:
        Insert → `30 → 40 → 50`

        Tree before imbalance:
        ```
            30
             \
              40
                \
                50
        ```

        This creates a right-heavy imbalance at node `30` 
        (balance factor becomes -2), and 
        the deepest inserted node (`50`) 
        is in the right subtree of the right child (`40`).


        🔧 Fixing RR Imbalance: Left Rotation
        To fix it, you perform a left rotation at the unbalanced node (`30`):
        ```
             40
            /  \
          30    50
        ```

        🔁 Left Rotation Logic
        Let’s say `z` is the unbalanced node (`30`), and 
        `y` is its right child (`40`):

        ```java
        Node leftRotate(Node z) {
            Node y = z.right;
            Node T2 = y.left;

            y.left = z;
            z.right = T2;

            // update heights
            z.height = 1 + max(height(z.left), height(z.right));
            y.height = 1 + max(height(y.left), height(y.right));

            return y; // new root after rotation
        }
        ```

        📌 Summary
        | Condition                    | Imbalance Type | Fix               |
        | ---------------------------- | -------------- | ----------------- |
        | Inserted into right of right | RR             | Left Rotation     |

    ✅ What is LR (Left-Right) Case?
        An LR imbalance occurs when:
            > A node is inserted into 
              the right subtree of the left child of an unbalanced node.

        🔎 When It Happens
            Example: Insert in this order → `50 → 30 → 40`
            Tree before imbalance:
                ```
                    50
                    /
                  30
                    \
                    40
                ```

            * The node `50` becomes unbalanced (balance factor = +2)
            * The imbalance is in the left subtree of `50`, 
              and within that, in the right subtree of `30`
            * That makes it a Left-Right case

        🛠 Fixing LR Case: Double Rotation
            You need two steps:
            1. Left Rotation on the left child (`30`)
            2. Right Rotation on the unbalanced node (`50`)

        #Step 1: Left Rotate `30`
            ```
                50
                /
              40
             /
            30
            ```

        #Step 2: Right Rotate `50`
            ```
                 40
                /  \
              30    50
            ```

        Now the AVL tree is balanced again.


        🔁 Code Outline (Java or Pseudocode)
            ```java
            if (balance > 1 && key > node.left.value) {
                node.left = leftRotate(node.left);  // Step 1
                return rightRotate(node);           // Step 2
            }
            ```

        📌 Summary
            | Condition                       | Imbalance Type | Fix (Rotations)       |
            | ------------------------------- | -------------- | --------------------- |
            | Insert into right of left child | LR             | Left + Right Rotation |

    ✅ What is LR (Left-Right) Case?
        The RL (Right-Left) case in an AVL Tree occurs when:
            > A node is inserted into the left subtree of the right child of an unbalanced node.

        ✅ When RL Happens
            Example insertion order: `30 → 50 → 40`

            Tree before imbalance:

            ```
              30
                \
                50
                /
              40
            ```

            * Node `30` becomes unbalanced with a balance factor of `-2`
            * The imbalance is in the right subtree of `30`
            * But the newly inserted node `40` is in the left subtree of 50, making it an RL case

        🛠 How to Fix RL Case
            You perform two rotations:
                1. Right Rotation on the right child (`50`)
                2. Left Rotation on the unbalanced node (`30`)

        #Step 1: Right Rotate `50`
            ```
                30
                 \
                 40
                    \
                    50
            ```

        #Step 2: Left Rotate `30`
            ```
                 40
                /  \
              30    50
            ```

            Tree is now balanced.

        🔁 Code Pattern (Pseudocode / Java-style)
            ```java
            if (balance < -1 && key < node.right.value) {
                node.right = rightRotate(node.right);  // Step 1
                return leftRotate(node);               // Step 2
            }
            ```

        📌 Summary

        | Condition                       | Imbalance Type | Fix (Rotations)       |
        | ------------------------------- | -------------- | --------------------- |
        | Insert into left of right child | RL             | Right + Left Rotation |
