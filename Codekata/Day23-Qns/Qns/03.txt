"Minimum Spanning Tree with Degree Constraint", 
"Given a graph and a degree constraint for each node, find a minimum spanning tree that satisfies the constraints or report if impossible.", 
"Hard", 
"HackerEarth, Google"

----------------------------------

Problem Title:
Minimum Spanning Tree with Degree Constraint

Problem Description:
Given an undirected, connected, weighted graph with N nodes and M edges, and an array D of length N where D[i] represents the maximum allowed degree for node i (1-based indexing), find a minimum spanning tree (MST) such that the degree of each node i in the tree does not exceed D[i]. If it is impossible to construct such a tree, output -1.

Input Format:
The first line contains two integers N and M — the number of nodes and edges.
The second line contains N integers D[1], D[2], ..., D[N] — the degree constraints for each node.
The next M lines each contain three integers u, v, w — denoting an undirected edge between nodes u and v with weight w.

Output Format:
Print a single integer — the minimum total weight of a spanning tree that satisfies the degree constraints, or -1 if no such tree exists.

Constraints:
1 ≤ N ≤ 1000
N-1 ≤ M ≤ 10000
1 ≤ D[i] ≤ N-1
1 ≤ u, v ≤ N, u ≠ v
1 ≤ w ≤ 10^6
There are no multiple edges or self-loops.

Sample Input 1:
4 5
2 2 2 2
1 2 1
2 3 2
3 4 3
4 1 4
1 3 5

Sample Output 1:
6

Sample Explanation 1:
One possible MST is edges (1-2, 2-3, 3-4) with total weight 1+2+3=6. All nodes have degree ≤ 2.

Sample Input 2:
3 3
1 1 1
1 2 1
2 3 2
1 3 3

Sample Output 2:
-1

Sample Explanation 2:
Any spanning tree must have at least one node with degree 2, which violates the constraints.

Difficulty:
Hard

Five Test Cases:
Test Case 1:
Input:
4 5
2 2 2 2
1 2 1
2 3 2
3 4 3
4 1 4
1 3 5
Output:
6

Test Case 2:
Input:
3 3
1 1 1
1 2 1
2 3 2
1 3 3
Output:
-1

Test Case 3:
Input:
5 6
2 2 2 2 2
1 2 1
2 3 1
3 4 1
4 5 1
5 1 1
2 4 10
Output:
4

Test Case 4:
Input:
6 7
3 2 2 2 2 2
1 2 1
2 3 1
3 4 1
4 5 1
5 6 1
6 1 1
1 3 10
Output:
5

Test Case 5:
Input:
4 4
1 2 2 2
1 2 1
2 3 2
3 4 3
4 1 4
Output:
-1

----------------------------------

