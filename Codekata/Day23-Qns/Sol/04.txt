
import java.util.*;
import java.io.*;

public class Main {
    static boolean[] isPrime;
    static int MAX = 1000000;
    static int[] arr;
    static SegmentTree segTree;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int Q = Integer.parseInt(st.nextToken());

        arr = new int[N];
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }

        sieve();

        segTree = new SegmentTree(arr);

        StringBuilder sb = new StringBuilder();
        for (int q = 0; q < Q; q++) {
            st = new StringTokenizer(br.readLine());
            int type = Integer.parseInt(st.nextToken());
            if (type == 1) {
                int idx = Integer.parseInt(st.nextToken());
                int val = Integer.parseInt(st.nextToken());
                segTree.update(1, 0, N - 1, idx, val);
            } else {
                int l = Integer.parseInt(st.nextToken());
                int r = Integer.parseInt(st.nextToken());
                sb.append(segTree.query(1, 0, N - 1, l, r)).append('\n');
            }
        }
        System.out.print(sb);
    }

    static void sieve() {
        isPrime = new boolean[MAX + 1];
        Arrays.fill(isPrime, true);
        isPrime[0] = isPrime[1] = false;
        for (int i = 2; i * i <= MAX; i++) {
            if (isPrime[i]) {
                for (int j = i * i; j <= MAX; j += i) {
                    isPrime[j] = false;
                }
            }
        }
    }

    static class SegmentTree {
        int[] tree;
        int n;

        SegmentTree(int[] arr) {
            n = arr.length;
            tree = new int[4 * n];
            build(1, 0, n - 1, arr);
        }

        void build(int node, int l, int r, int[] arr) {
            if (l == r) {
                tree[node] = isPrime[arr[l]] ? 1 : 0;
            } else {
                int mid = (l + r) / 2;
                build(2 * node, l, mid, arr);
                build(2 * node + 1, mid + 1, r, arr);
                tree[node] = tree[2 * node] + tree[2 * node + 1];
            }
        }

        void update(int node, int l, int r, int idx, int val) {
            if (l == r) {
                tree[node] = isPrime[val] ? 1 : 0;
            } else {
                int mid = (l + r) / 2;
                if (idx <= mid) {
                    update(2 * node, l, mid, idx, val);
                } else {
                    update(2 * node + 1, mid + 1, r, idx, val);
                }
                tree[node] = tree[2 * node] + tree[2 * node + 1];
            }
        }

        int query(int node, int l, int r, int ql, int qr) {
            if (qr < l || r < ql) return 0;
            if (ql <= l && r <= qr) return tree[node];
            int mid = (l + r) / 2;
            return query(2 * node, l, mid, ql, qr) + query(2 * node + 1, mid + 1, r, ql, qr);
        }
    }
}