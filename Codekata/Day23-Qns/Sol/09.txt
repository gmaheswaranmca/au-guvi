
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String pattern = sc.nextLine();
        int n = Integer.parseInt(sc.nextLine());
        String stream = sc.nextLine();

        int m = pattern.length();
        int base = 31;
        int mod = 1_000_000_007;

        // Precompute base powers
        long[] pow = new long[m];
        pow[0] = 1;
        for (int i = 1; i < m; i++) {
            pow[i] = (pow[i - 1] * base) % mod;
        }

        // Compute hash of pattern
        long patHash = 0;
        for (int i = 0; i < m; i++) {
            patHash = (patHash * base + (pattern.charAt(i) - 'a' + 1)) % mod;
        }

        long windowHash = 0;
        boolean found = false;
        Queue<Character> window = new ArrayDeque<>();

        for (int i = 0; i < n; i++) {
            char c = stream.charAt(i);
            window.add(c);
            windowHash = (windowHash * base + (c - 'a' + 1)) % mod;

            if (window.size() > m) {
                char removed = window.poll();
                windowHash = (windowHash - ((removed - 'a' + 1) * pow[m - 1]) % mod + mod) % mod;
            }

            if (!found && window.size() == m && windowHash == patHash) {
                // Double check to avoid hash collision
                int j = 0;
                for (char ch : window) {
                    if (ch != pattern.charAt(j++)) {
                        break;
                    }
                }
                if (j == m) found = true;
            }

            System.out.println(found ? "YES" : "NO");
        }
    }
}