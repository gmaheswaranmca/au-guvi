
import java.util.*;
import java.io.*;

public class Main {
    static class Edge implements Comparable<Edge> {
        int u, v, w;
        Edge(int u, int v, int w) {
            this.u = u; this.v = v; this.w = w;
        }
        public int compareTo(Edge o) {
            return Integer.compare(this.w, o.w);
        }
    }

    static class DSU {
        int[] p, r;
        DSU(int n) {
            p = new int[n+1];
            r = new int[n+1];
            for (int i = 1; i <= n; i++) p[i] = i;
        }
        int find(int x) {
            return p[x] == x ? x : (p[x] = find(p[x]));
        }
        boolean union(int x, int y) {
            int px = find(x), py = find(y);
            if (px == py) return false;
            if (r[px] < r[py]) p[px] = py;
            else {
                p[py] = px;
                if (r[px] == r[py]) r[px]++;
            }
            return true;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] nm = br.readLine().split(" ");
        int n = Integer.parseInt(nm[0]), m = Integer.parseInt(nm[1]);
        int[] deg = new int[n+1];
        String[] ds = br.readLine().split(" ");
        for (int i = 1; i <= n; i++) deg[i] = Integer.parseInt(ds[i-1]);
        Edge[] edges = new Edge[m];
        for (int i = 0; i < m; i++) {
            String[] uvw = br.readLine().split(" ");
            int u = Integer.parseInt(uvw[0]);
            int v = Integer.parseInt(uvw[1]);
            int w = Integer.parseInt(uvw[2]);
            edges[i] = new Edge(u, v, w);
        }
        Arrays.sort(edges);

        int[] used = new int[n+1];
        DSU dsu = new DSU(n);
        int cnt = 0, sum = 0;
        for (Edge e : edges) {
            if (dsu.find(e.u) != dsu.find(e.v) && used[e.u] < deg[e.u] && used[e.v] < deg[e.v]) {
                dsu.union(e.u, e.v);
                used[e.u]++;
                used[e.v]++;
                sum += e.w;
                cnt++;
                if (cnt == n-1) break;
            }
        }
        if (cnt == n-1) System.out.println(sum);
        else System.out.println(-1);
    }
}