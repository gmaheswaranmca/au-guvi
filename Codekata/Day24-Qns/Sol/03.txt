import java.util.*;
public class Main {
    static class Edge {
        int to, weight;
        Edge(int t, int w) { to = t; weight = w; }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt(), M = sc.nextInt(), S = sc.nextInt();
        List<Edge>[] adj = new ArrayList[N + 1];
        for (int i = 1; i <= N; i++) adj[i] = new ArrayList<>();
        for (int i = 0; i < M; i++) {
            int u = sc.nextInt(), v = sc.nextInt(), w = sc.nextInt();
            adj[u].add(new Edge(v, w));
        }
        int[] dist = new int[N + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        boolean[] inQueue = new boolean[N + 1];
        Queue<Integer> q = new ArrayDeque<>();
        dist[S] = 0;
        q.offer(S);
        inQueue[S] = true;
        while (!q.isEmpty()) {
            int u = q.poll();
            inQueue[u] = false;
            for (Edge e : adj[u]) {
                if (dist[u] != Integer.MAX_VALUE && dist[e.to] > dist[u] + e.weight) {
                    dist[e.to] = dist[u] + e.weight;
                    if (!inQueue[e.to]) {
                        q.offer(e.to);
                        inQueue[e.to] = true;
                    }
                }
            }
        }
        for (int i = 1; i <= N; i++) {
            if (dist[i] == Integer.MAX_VALUE) System.out.print("-1");
            else System.out.print(dist[i]);
            if (i < N) System.out.print(" ");
        }
    }
}