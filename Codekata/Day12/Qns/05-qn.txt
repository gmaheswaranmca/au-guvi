05 
"Clone Graph", 
"Given a reference of a node in a connected undirected graph, return a deep copy of the graph.", 
"Medium", 
"LeetCode, Google"
----------------------------------
Problem Title:
Clone Graph

Problem Description:
Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph. Each node in the graph contains a value (integer) and a list of its neighbors. The cloned graph should have the same structure as the original graph, but all nodes and edges should be new instances.

Input Format:
- The input is a reference to a Node object representing the starting node of the graph. Each Node has an integer value and a list of neighbor Node references.

Output Format:
- Return a reference to the starting node of the cloned graph.

Constraints:
- The number of nodes in the graph is in the range [1, 100].
- The value of each node is unique and in the range [1, 100].
- The graph is connected and undirected.

Sample Input:
A graph with 4 nodes:
Node 1: neighbors [2, 4]
Node 2: neighbors [1, 3]
Node 3: neighbors [2, 4]
Node 4: neighbors [1, 3]

Sample Output:
A deep copy of the above graph, with new node instances and the same neighbor relationships.

Sample Explanation:
The returned graph should have 4 nodes, each with the same value and neighbor structure as the original, but all nodes and neighbor lists should be new objects.

Difficulty:
Medium

Five Test Cases:
1. Single node with no neighbors.
2. Two nodes connected to each other.
3. Four nodes in a cycle (as in the sample input).
4. Three nodes in a line: 1-2-3.
5. Five nodes in a star: 1 connected to 2, 3, 4, 5; others only connected to 1.

Test Case 1:
Input:
Node 1: neighbors []
Output:
Node 1: neighbors []

Test Case 2:
Input:
Node 1: neighbors [2]
Node 2: neighbors [1]
Output:
Node 1: neighbors [2]
Node 2: neighbors [1]

Test Case 3:
Input:
Node 1: neighbors [2, 4]
Node 2: neighbors [1, 3]
Node 3: neighbors [2, 4]
Node 4: neighbors [1, 3]
Output:
Node 1: neighbors [2, 4]
Node 2: neighbors [1, 3]
Node 3: neighbors [2, 4]
Node 4: neighbors [1, 3]

Test Case 4:
Input:
Node 1: neighbors [2]
Node 2: neighbors [1, 3]
Node 3: neighbors [2]
Output:
Node 1: neighbors [2]
Node 2: neighbors [1, 3]
Node 3: neighbors [2]

Test Case 5:
Input:
Node 1: neighbors [2, 3, 4, 5]
Node 2: neighbors [1]
Node 3: neighbors [1]
Node 4: neighbors [1]
Node 5: neighbors [1]
Output:
Node 1: neighbors [2, 3, 4, 5]
Node 2: neighbors [1]
Node 3: neighbors [1]
Node 4: neighbors [1]
Node 5: neighbors [1]
----------------------------------
