-  A graph is a non-linear data structure 
   made up of vertices (nodes) and edges (connections). 
   It is used to represent networks 
   like social connections, maps, the internet, 
   dependency structures, and more.
    ðŸ”¹ Types of Graphs:
        * Directed vs Undirected: Edges have direction or not.
        * Weighted vs Unweighted: Edges may carry weights (e.g., distances, costs).
        * Cyclic vs Acyclic: May or may not contain cycles.
        * Connected vs Disconnected: Whether all nodes are reachable from each other.
        * Simple vs Multigraph: No multiple edges between the same pair vs allowing them.

    ðŸ”¹ Representation:
        * Adjacency Matrix: 2D array showing connections.
        * Adjacency List: List of nodes with their neighbors (space-efficient).

    ðŸ”¹ Applications:
        * Shortest path finding (Dijkstra, Bellman-Ford)
        * Topological sort (DAG)
        * Network routing
        * Cycle detection
        * Social network analysis
        * Game AI and puzzles

Notes on graph    
    ðŸ”¹ Properties of Graphs:
        * Order: Number of vertices (nodes) in the graph.
        * Size: Number of edges in the graph.
        * Degree: Number of edges connected to a vertex.
        * Path: Sequence of vertices connected by edges.
        * Cycle: Path that starts and ends at the same vertex.
        * Connectedness: Whether there is a path between every pair of vertices.
        * Components: Subgraphs in which any two vertices are connected.

    ðŸ”¹ More Types of Graphs:
        * Complete Graph: Every pair of vertices is connected.
        * Bipartite Graph: Vertices can be divided into two sets, with edges only between sets.
        * Tree: A connected acyclic undirected graph.
        * DAG (Directed Acyclic Graph): Directed graph with no cycles.

    ðŸ”¹ Graph Representations (Examples):

        * Adjacency Matrix (for 4 nodes):
            0 1 2 3
          0 0 1 0 1
          1 1 0 1 0
          2 0 1 0 1
          3 1 0 1 0

        * Adjacency List:
            0: 1, 3
            1: 0, 2
            2: 1, 3
            3: 0, 2

    ðŸ”¹ Graph Traversal Algorithms:

        * Breadth-First Search (BFS):
            - Explores neighbors level by level.
            - Uses a queue.
            - Finds shortest path in unweighted graphs.

            Example (Adjacency List):
                Graph: 0: [1,2], 1: [0,3], 2: [0,3], 3: [1,2]
                BFS from 0: Visit 0 â†’ 1 â†’ 2 â†’ 3

            Python Example:
                from collections import deque
                def bfs(graph, start):
                    visited = set()
                    queue = deque([start])
                    while queue:
                        node = queue.popleft()
                        if node not in visited:
                            print(node)
                            visited.add(node)
                            queue.extend(n for n in graph[node] if n not in visited)

        * Depth-First Search (DFS):
            - Explores as far as possible along each branch before backtracking.
            - Uses a stack (can be implemented recursively).

            Example (Adjacency List):
                Graph: 0: [1,2], 1: [0,3], 2: [0,3], 3: [1,2]
                DFS from 0: Visit 0 â†’ 1 â†’ 3 â†’ 2

            Python Example:
                def dfs(graph, node, visited=None):
                    if visited is None:
                        visited = set()
                    if node not in visited:
                        print(node)
                        visited.add(node)
                        for neighbor in graph[node]:
                            dfs(graph, neighbor, visited)
                            