import java.util.*;

public class DistinctSubstringsZAlgo {
    // Function to build Z-array for a given string
    private static int[] buildZ(String s) {
        int n = s.length();
        int[] z = new int[n];
        int l = 0, r = 0;
        for (int i = 1; i < n; i++) {
            if (i <= r) {
                z[i] = Math.min(r - i + 1, z[i - l]);
            }
            while (i + z[i] < n && s.charAt(z[i]) == s.charAt(i + z[i])) {
                z[i]++;
            }
            if (i + z[i] - 1 > r) {
                l = i;
                r = i + z[i] - 1;
            }
        }
        return z;
    }

    // Function to count distinct substrings using Z Algorithm efficiently
    public static int countDistinctSubstrings(String s) {
        int n = s.length();
        int totalDistinct = 0;
        
        // Use suffix array approach with Z-algorithm
        List<String> suffixes = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            suffixes.add(s.substring(i));
        }
        
        // Sort suffixes to group similar ones together
        Collections.sort(suffixes);
        
        // Count distinct substrings using Z-array to find common prefixes
        for (int i = 0; i < suffixes.size(); i++) {
            String currentSuffix = suffixes.get(i);
            int uniqueContribution = currentSuffix.length();
            
            if (i > 0) {
                // Use Z-algorithm to find longest common prefix with previous suffix
                String combined = suffixes.get(i - 1) + "#" + currentSuffix;
                int[] z = buildZ(combined);
                int prevSuffixLen = suffixes.get(i - 1).length();
                
                // The LCP length is the Z-value at position (prevSuffixLen + 1)
                int lcpLength = 0;
                if (prevSuffixLen + 1 < z.length) {
                    lcpLength = z[prevSuffixLen + 1];
                }
                
                // Only count the non-overlapping part as new distinct substrings
                uniqueContribution = Math.max(0, currentSuffix.length() - lcpLength);
            }
            
            totalDistinct += uniqueContribution;
        }
        
        return totalDistinct;
    }



    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = Integer.parseInt(sc.nextLine());
        for (int t = 0; t < T; t++) {
            String s = sc.nextLine().trim();
            System.out.println(countDistinctSubstrings(s));
        }
    }
}