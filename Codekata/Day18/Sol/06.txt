import java.util.Scanner;

public class MinimumCharactersForPalindrome {
    // Function to compute LPS (Longest Prefix Suffix) array for KMP
    private static int computeLPS(String str) {
        int n = str.length();
        int[] lps = new int[n];
        int len = 0;
        int i = 1;
        while (i < n) {
            if (str.charAt(i) == str.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps[n - 1];
    }

    public static int minCharsToPalindrome(String s) {
        String rev = new StringBuilder(s).reverse().toString();
        String concat = s + "#" + rev;
        int lps = computeLPS(concat);
        return s.length() - lps;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine().trim();
        System.out.println(minCharsToPalindrome(s));
    }
}