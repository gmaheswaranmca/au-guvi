import java.util.*;

class MyQueue {
    private Stack<Integer> stackIn;
    private Stack<Integer> stackOut;

    public MyQueue() {
        stackIn = new Stack<>();
        stackOut = new Stack<>();
    }

    public void enqueue(int x) {
        stackIn.push(x);
    }

    public void dequeue() {
        moveInToOut();
        if (!stackOut.isEmpty()) {
            stackOut.pop();
        }
    }

    public int peek() {
        moveInToOut();
        return stackOut.peek();
    }

    public boolean empty() {
        return stackIn.isEmpty() && stackOut.isEmpty();
    }

    private void moveInToOut() {
        if (stackOut.isEmpty()) {
            while (!stackIn.isEmpty()) {
                stackOut.push(stackIn.pop());
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = Integer.parseInt(sc.nextLine());
        MyQueue queue = new MyQueue();
        for (int i = 0; i < n; i++) {
            String[] parts = sc.nextLine().split(" ");
            switch (parts[0]) {
                case "enqueue":
                    queue.enqueue(Integer.parseInt(parts[1]));
                    break;
                case "dequeue":
                    queue.dequeue();
                    break;
                case "peek":
                    System.out.println(queue.peek());
                    break;
                case "empty":
                    System.out.println(queue.empty() ? "true" : "false");
                    break;
            }
        }
        sc.close();
    }
}