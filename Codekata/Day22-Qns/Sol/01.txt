import java.util.*;

public class SlidingWindowMedian {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(), k = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) nums[i] = sc.nextInt();
        double[] result = medianSlidingWindow(nums, k);
        for (int i = 0; i < result.length; i++) {
            if (result[i] == (long) result[i])
                System.out.print((long) result[i]);
            else
                System.out.print(result[i]);
            if (i != result.length - 1) System.out.print(" ");
        }
    }

    public static double[] medianSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        double[] res = new double[n - k + 1];
        TreeMap<Integer, Integer> lo = new TreeMap<>(), hi = new TreeMap<>();
        int loSize = 0, hiSize = 0;

        for (int i = 0; i < n; i++) {
            if (lo.isEmpty() || nums[i] <= lo.lastKey()) {
                lo.put(nums[i], lo.getOrDefault(nums[i], 0) + 1);
                loSize++;
            } else {
                hi.put(nums[i], hi.getOrDefault(nums[i], 0) + 1);
                hiSize++;
            }
            // Balance
            while (loSize > hiSize + 1) {
                int key = lo.lastKey();
                lo.put(key, lo.get(key) - 1);
                if (lo.get(key) == 0) lo.remove(key);
                loSize--;
                hi.put(key, hi.getOrDefault(key, 0) + 1);
                hiSize++;
            }
            while (loSize < hiSize) {
                int key = hi.firstKey();
                hi.put(key, hi.get(key) - 1);
                if (hi.get(key) == 0) hi.remove(key);
                hiSize--;
                lo.put(key, lo.getOrDefault(key, 0) + 1);
                loSize++;
            }
            if (i >= k - 1) {
                // Get median
                if (k % 2 == 1) {
                    res[i - k + 1] = lo.lastKey();
                } else {
                    res[i - k + 1] = ((long) lo.lastKey() + (long) hi.firstKey()) / 2.0;
                }
                // Remove outgoing element
                int out = nums[i - k + 1];
                if (lo.containsKey(out)) {
                    lo.put(out, lo.get(out) - 1);
                    if (lo.get(out) == 0) lo.remove(out);
                    loSize--;
                } else {
                    hi.put(out, hi.get(out) - 1);
                    if (hi.get(out) == 0) hi.remove(out);
                    hiSize--;
                }
                // Balance after removal
                while (loSize > hiSize + 1) {
                    int key = lo.lastKey();
                    lo.put(key, lo.get(key) - 1);
                    if (lo.get(key) == 0) lo.remove(key);
                    loSize--;
                    hi.put(key, hi.getOrDefault(key, 0) + 1);
                    hiSize++;
                }
                while (loSize < hiSize) {
                    int key = hi.firstKey();
                    hi.put(key, hi.get(key) - 1);
                    if (hi.get(key) == 0) hi.remove(key);
                    hiSize--;
                    lo.put(key, lo.getOrDefault(key, 0) + 1);
                    loSize++;
                }
            }
        }
        return res;
    }
}