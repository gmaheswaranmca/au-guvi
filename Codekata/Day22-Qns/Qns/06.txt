"Linked List Cycle II", 
"Given a linked list, return the node where the cycle begins. If there is no cycle, return null.", 
"Medium", 
"LeetCode, Amazon"

----------------------------------

Problem Title:
Linked List Cycle II

Problem Description:
Given a linked list, return the node where the cycle begins. If there is no cycle, return null. To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where the tail connects to. If pos is -1, then there is no cycle in the linked list. Note that you should not modify the linked list.

Input Format:
- The first line contains an integer n, the number of nodes in the linked list.
- The second line contains n space-separated integers, the values of the nodes.
- The third line contains an integer pos, the position where the tail connects to form a cycle (-1 if there is no cycle).

Output Format:
- Print the value of the node where the cycle begins. If there is no cycle, print "null".

Constraints:
- 0 <= n <= 10^4
- -10^5 <= Node.val <= 10^5
- pos is -1 or a valid index in the linked list

Sample Input 1:
3
3 2 0
1

Sample Output 1:
2

Explanation 1:
There are three nodes with values 3 -> 2 -> 0. The tail (node with value 0) connects to the node at position 1 (node with value 2), forming a cycle starting at node 2.

Sample Input 2:
4
1 2 3 4
-1

Sample Output 2:
null

Explanation 2:
There are four nodes with values 1 -> 2 -> 3 -> 4. There is no cycle in the linked list.

Difficulty:
Medium

Five Test Cases:
Test Case 1:
Input:
3
3 2 0
1
Output:
2

Test Case 2:
Input:
4
1 2 3 4
-1
Output:
null

Test Case 3:
Input:
1
1
0
Output:
1

Test Case 4:
Input:
0

-1
Output:
null

Test Case 5:
Input:
5
1 2 3 4 5
2
Output:
3

----------------------------------
