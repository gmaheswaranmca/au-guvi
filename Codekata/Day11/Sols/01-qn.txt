01 "Tower of Hanoi Solver", 
"Write a recursive function to solve the Tower of Hanoi problem 
for N disks and print the sequence of moves.", 
"Easy", 
"LeetCode, HackerRank, Amazon"
----------------------------------
Problem Title: Tower of Hanoi Solver

Problem Description:
    Given the number of disks N, 
    write a recursive function to solve the Tower of Hanoi problem. 

    The objective is to move all the disks 
    from the source rod to the destination rod 
    using an auxiliary rod, following these rules:

    1. Only one disk can be moved at a time.
    2. Each move consists of taking the upper disk 
    from one of the stacks and 
    placing it on top of another stack or on an empty rod.
    3. No disk may be placed on top of a smaller disk.

Input Format:
    - An integer N, representing the number of disks.

Output Format:
    - Print the sequence of moves required to solve the Tower of Hanoi problem.
    - Each move should be printed on a new line in the format: 
    "Move disk X from rod A to rod B", 
    where X is the disk number, 
    A is the source rod, and 
    B is the destination rod.

Constraints:
    - 1 ≤ N ≤ 15

Sample Input:
    3

Sample Output:
    Move disk 1 from rod A to rod C
    Move disk 2 from rod A to rod B
    Move disk 1 from rod C to rod B
    Move disk 3 from rod A to rod C
    Move disk 1 from rod B to rod A
    Move disk 2 from rod B to rod C
    Move disk 1 from rod A to rod C

Explanation:
    There are 3 disks on rod A. 
    The goal is to move all disks to rod C using rod B as auxiliary. 
    The output shows the sequence of moves to achieve this.

Difficulty:
    Easy

Five Test Cases:

Test Case 1:
    Input: 
        1
    Output:
        Move disk 1 from rod A to rod C

Test Case 2:
    Input: 
        2
    Output:
        Move disk 1 from rod A to rod B
        Move disk 2 from rod A to rod C
        Move disk 1 from rod B to rod C

Test Case 3:
    Input: 
        3
    Output:
        Move disk 1 from rod A to rod C
        Move disk 2 from rod A to rod B
        Move disk 1 from rod C to rod B
        Move disk 3 from rod A to rod C
        Move disk 1 from rod B to rod A
        Move disk 2 from rod B to rod C
        Move disk 1 from rod A to rod C

Test Case 4:
    Input: 
        4
    Output:
        Move disk 1 from rod A to rod B
        Move disk 2 from rod A to rod C
        Move disk 1 from rod B to rod C
        Move disk 3 from rod A to rod B
        Move disk 1 from rod C to rod A
        Move disk 2 from rod C to rod B
        Move disk 1 from rod A to rod B
        Move disk 4 from rod A to rod C
        Move disk 1 from rod B to rod C
        Move disk 2 from rod B to rod A
        Move disk 1 from rod C to rod A
        Move disk 3 from rod B to rod C
        Move disk 1 from rod A to rod B
        Move disk 2 from rod A to rod C
        Move disk 1 from rod B to rod C

Test Case 5:
    Input: 
        5
    Output:
        Move disk 1 from rod A to rod C
        Move disk 2 from rod A to rod B
        Move disk 1 from rod C to rod B
        Move disk 3 from rod A to rod C
        Move disk 1 from rod B to rod A
        Move disk 2 from rod B to rod C
        Move disk 1 from rod A to rod C
        Move disk 4 from rod A to rod B
        Move disk 1 from rod C to rod B
        Move disk 2 from rod C to rod A
        Move disk 1 from rod B to rod A
        Move disk 3 from rod C to rod B
        Move disk 1 from rod A to rod C
        Move disk 2 from rod A to rod B
        Move disk 1 from rod C to rod B
        Move disk 5 from rod A to rod C
        Move disk 1 from rod B to rod A
        Move disk 2 from rod B to rod C
        Move disk 1 from rod A to rod C
        Move disk 3 from rod B to rod A
        Move disk 1 from rod C to rod B
        Move disk 2 from rod C to rod A
        Move disk 1 from rod B to rod A
        Move disk 4 from rod B to rod C
        Move disk 1 from rod A to rod C
        Move disk 2 from rod A to rod B
        Move disk 1 from rod C to rod B
        Move disk 3 from rod A to rod C
        Move disk 1 from rod B to rod A
        Move disk 2 from rod B to rod C
        Move disk 1 from rod A to rod C

----------------------------------
/* Java Solution */
import java.util.Scanner;

public class TowerOfHanoi {
    public static void solve(int n, char source, char auxiliary, char destination) {
        if (n == 1) {
            System.out.println("Move disk 1 from rod " + source + " to rod " + destination);
            return;
        }
        solve(n - 1, source, destination, auxiliary);
        System.out.println("Move disk " + n + " from rod " + source + " to rod " + destination);
        solve(n - 1, auxiliary, source, destination);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        solve(n, 'A', 'B', 'C');
    }
}

----------------------------------

Complexity:
    Time Complexity:
        The number of moves required to solve the Tower of Hanoi problem with N disks is 2^N - 1.  
        So, the time complexity is O(2^N).

    Space Complexity:
        The space complexity is O(N) due to the recursion stack (maximum depth is N).

-----------------------------------

Detailed step-by-step explanation of your Tower of Hanoi code:
    1. Import Statement
        ```java
        import java.util.Scanner;
        ```
        - Purpose: Imports the `Scanner` class, 
        which allows you to read user input from the console.

    2. Class Definition
        ```java
        public class TowerOfHanoi {
            // ...methods...
        }
        ```
        - Purpose: Defines a public class named `TowerOfHanoi`. 
        All methods and logic are inside this class.

    3. Recursive Method: `solve`
        ```java
        public static void solve(int n, char source, char auxiliary, char destination) {
            if (n == 1) {
                System.out.println("Move disk 1 from rod " + source + " to rod " + destination);
                return;
            }
            solve(n - 1, source, destination, auxiliary);
            System.out.println("Move disk " + n + " from rod " + source + " to rod " + destination);
            solve(n - 1, auxiliary, source, destination);
        }
        ```

        Step-by-step:
            - Parameters:
                - `n`: Number of disks to move.
                - `source`: The rod where disks start.
                - `auxiliary`: The helper rod.
                - `destination`: The target rod.

            - Base Case:  
                ```java
                if (n == 1) {
                    System.out.println("Move disk 1 from rod " + source + " to rod " + destination);
                    return;
                }
                ```
                - If only one disk remains, print the move and stop recursion.

            - Recursive Case:  
                ```java
                solve(n - 1, source, destination, auxiliary);
                System.out.println("Move disk " + n + " from rod " + source + " to rod " + destination);
                solve(n - 1, auxiliary, source, destination);
                ```
            - Move `n-1` disks from `source` to `auxiliary` (using `destination` as helper).
            - Move the largest disk (`n`) from `source` to `destination`.
            - Move the `n-1` disks from `auxiliary` to `destination` (using `source` as helper).

    4. Main Method
        ```java
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            int n = sc.nextInt();
            solve(n, 'A', 'B', 'C');
        }
        ```
        - Purpose: Entry point of the program.
        - Steps:
            1. Creates a `Scanner` to read input.
            2. Reads an integer `n` (number of disks) from the user.
            3. Calls `solve` to print the steps to move all disks from rod 'A' to rod 'C', using 'B' as auxiliary.

    Key Concepts
        - Recursion: The problem is broken into smaller subproblems (moving `n-1` disks).
        - Base Case: Stops recursion when only one disk is left.
        - Parameters: Rods are represented by characters for clarity.

    Gotchas
        - Stack Overflow: For large `n`, recursion depth may exceed Java's stack limit.
        - Input Handling: No prompt or validation for user input.

    Example Output
        For `n = 2`, output will be:
        ```
        Move disk 1 from rod A to rod B
        Move disk 2 from rod A to rod C
        Move disk 1 from rod B to rod C
        ```


