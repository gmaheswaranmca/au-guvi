04
"N-Queens Problem", 
"Given an integer N, 
 place N queens on an N×N chessboard 
 so that no two queens threaten each other. 
 Print all possible solutions.", 
 "Medium", 
 "LeetCode, Facebook"
 ----------------------------------
Problem Title:
    N-Queens Problem

Problem Description:
    Given an integer N, 
    place N queens on an N×N chessboard 
    so that no two queens threaten each other. 
    
    A queen can attack another queen 
    if they are on the same row, column, or diagonal. 
    
    Your task is to print all possible distinct solutions 
    to the N-Queens problem. 
    Each solution should be represented as a list of strings, 
    where each string represents a row of the chessboard, 
    and 'Q' indicates a queen 
    and '.' indicates an empty space.

Input Format:
- A single integer N (1 ≤ N ≤ 9), 
  the size of the chessboard and the number of queens to place.

Output Format:
- Print all possible solutions. 
  For each solution, print N lines representing the chessboard configuration. 
  Separate different solutions by a blank line. 
  If there are no solutions, print "No solution".

Constraints:
- 1 ≤ N ≤ 9

Sample Input:
4

Sample Output:
.Q..
...Q
Q...
..Q.

..Q.
Q...
...Q
.Q..

Explanation:
There are two possible ways to place 4 queens on a 4x4 chessboard 
so that no two queens threaten each other. 
Each solution is printed as N lines, 
with 'Q' for a queen and '.' 
for an empty cell. 
Solutions are separated by a blank line.

Difficulty:
Medium

Five Test Cases:
Test Case 1:
    Input:
    1
    Output:
    Q

Test Case 2:
    Input:
    2
    Output:
    No solution

Test Case 3:
    Input:
    3
    Output:
    No solution

Test Case 4:
    Input:
    4
    Output:
    .Q..
    ...Q
    Q...
    ..Q.

    ..Q.
    Q...
    ...Q
    .Q..

Test Case 5:
    Input:
    5
    Output:
    Q.... 
    ..Q..
    ....Q
    .Q...
    ...Q.

    Q....
    ...Q.
    .Q...
    ....Q
    ..Q..

----------------------------------
/* Java Solution */
import java.util.*;

public class NQueens {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<List<String>> solutions = solveNQueens(n);
        if (solutions.isEmpty()) {
            System.out.println("No solution");
        } else {
            for (List<String> sol : solutions) {
                for (String row : sol) {
                    System.out.println(row);
                }
                System.out.println();
            }
        }
    }

    private static List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();
        char[][] board = new char[n][n];
        for (char[] row : board) Arrays.fill(row, '.');
        backtrack(res, board, 0, n, new boolean[n], 
            new boolean[2 * n], new boolean[2 * n]);
        return res;
    }

    private static void backtrack(List<List<String>> res, char[][] board, int row, 
        int n, boolean[] cols, boolean[] d1, boolean[] d2) {
        if (row == n) {
            List<String> sol = new ArrayList<>();
            for (char[] r : board) sol.add(new String(r));
            res.add(sol);
            return;
        }
        for (int col = 0; col < n; col++) {
            int id1 = col - row + n, id2 = col + row;
            if (cols[col] || d1[id1] || d2[id2]) continue;
            board[row][col] = 'Q';
            cols[col] = d1[id1] = d2[id2] = true;
            backtrack(res, board, row + 1, n, cols, d1, d2);
            board[row][col] = '.';
            cols[col] = d1[id1] = d2[id2] = false;
        }
    }
}

----------------------------------


Detailed step-by-step explanation of the provided N-Queens code:
    1. Imports and Class Declaration
        ```java
        import java.util.*;

        public class NQueens {
        ```
        - `import java.util.*;`  
           imports all utility classes 
           (like `Scanner`, `List`, `ArrayList`, etc.).
        - The class `NQueens` contains the main logic.

    2. Main Method
        ```java
        public static void main(String[] args) {
            Scanner sc = new Scanner(System.in);
            int n = sc.nextInt();
            List<List<String>> solutions = solveNQueens(n);
            if (solutions.isEmpty()) {
                System.out.println("No solution");
            } else {
                for (List<String> sol : solutions) {
                    for (String row : sol) {
                        System.out.println(row);
                    }
                    System.out.println();
                }
            }
        }
        ```
        - Reads an integer `n` 
          (the size of the chessboard and number of queens).
        - Calls `solveNQueens(n)` 
          to get all valid solutions.
        - If no solution exists, 
          prints "No solution".
        - Otherwise, 
          prints each solution (each as a list of strings, one per row).

    3. Solving N-Queens
        ```java
        private static List<List<String>> solveNQueens(int n) {
            List<List<String>> res = new ArrayList<>();
            char[][] board = new char[n][n];
            for (char[] row : board) Arrays.fill(row, '.');
            backtrack(res, board, 0, n, new boolean[n], 
                new boolean[2 * n], new boolean[2 * n]);
            return res;
        }
        ```
        - Initializes the result list `res`.
        - Creates an `n x n` board filled with `'.'` (empty cells).
        - Calls `backtrack` to fill the board row by row.
        - Uses three boolean arrays to track columns and diagonals:
        - `cols`: columns with queens.
        - `d1`: "main" diagonals (top-left to bottom-right).
        - `d2`: "anti" diagonals (top-right to bottom-left).

    4. Backtracking Function
        ```java
        private static void backtrack(List<List<String>> res, 
            char[][] board, int row, int n, boolean[] cols, 
            boolean[] d1, boolean[] d2) {
            if (row == n) {
                List<String> sol = new ArrayList<>();
                for (char[] r : board) sol.add(new String(r));
                res.add(sol);
                return;
            }
            for (int col = 0; col < n; col++) {
                int id1 = col - row + n, id2 = col + row;
                if (cols[col] || d1[id1] || d2[id2]) continue;
                board[row][col] = 'Q';
                cols[col] = d1[id1] = d2[id2] = true;
                backtrack(res, board, row + 1, n, cols, d1, d2);
                board[row][col] = '.';
                cols[col] = d1[id1] = d2[id2] = false;
            }
        }
        ```
        - Base Case: If `row == n`, a valid solution is found. 
          Convert the board to a list of strings and add to results.
        - For Each Column: Try placing a queen 
          in each column of the current row.
        - Diagonal Indexing:
            - `id1 = col - row + n` for main diagonals 
            (offset by `n` to avoid negative indices).
            - `id2 = col + row` for anti-diagonals.
        - Safety Check: If the column or 
          either diagonal is already occupied, 
          skip.
        - Place Queen: 
          Mark the board and tracking arrays.
        - Recursive Call: Move to the next row.
        - Backtrack: Remove the queen and 
          reset tracking arrays (undo the move).

    5. Key Concepts
        - Backtracking: Systematically tries all possibilities, 
          undoing moves when a dead end is reached.
        - Diagonal Tracking: Efficiently checks if a queen can be placed 
          without scanning the whole board.
        - Board Representation: Uses a 2D char array for the board, 
          converting to strings for output.

    6. Potential Gotchas
        - Diagonal indexing can be confusing; 
          the offset ensures array indices stay positive.
        - The solution prints all possible arrangements, 
          not just one.

    7. Example Output (n=4)
        ```
        .Q..
        ...Q
        Q...
        ..Q.

        ..Q.
        Q...
        ...Q
        .Q..
        ```


