02 
 "Fibonacci Sequence Generator", 
 "Implement a recursive function 
  to generate the Nth Fibonacci number. 
  Optimize it using memoization.", 
"Easy", 
"HackerEarth, Google"
----------------------------------
Problem Title: Fibonacci Sequence Generator

Problem Description:
    Given a positive integer N,
    implement a recursive function to compute the Nth Fibonacci number. 
    To improve efficiency, optimize your solution 
    using memoization to avoid redundant calculations.

Input Format:
    A single integer N, where N represents the position in the Fibonacci sequence (1-based indexing).

Output Format:
    A single integer representing the Nth Fibonacci number.

Constraints:
    1 ≤ N ≤ 10^5

Sample Input 1:
    5

Sample Output 1:
    5

Sample Input 2:
    10

Sample Output 2:
    55

Explanation:
The Fibonacci sequence is defined as:
    F(1) = 1, F(2) = 1
    F(n) = F(n-1) + F(n-2) for n > 2

    For N = 5: F(5) = F(4) + F(3) = 3 + 2 = 5
    For N = 10: F(10) = 55

Difficulty:
    Easy

Test Cases:
1. 
    Input: 1  
    Output: 1

2. 
    Input: 2  
    Output: 1

3. 
    Input: 7  
    Output: 13

4. 
    Input: 20  
    Output: 6765

5. 
    Input: 50  
    Output: 12586269025

----------------------------------
/* Java Solution */
import java.util.HashMap;
import java.util.Scanner;

public class FibonacciMemoization {
    private static HashMap<Integer, Long> memo = new HashMap<>();

    public static long fib(int n) {
        if (n <= 2) return 1;
        if (memo.containsKey(n)) return memo.get(n);
        long result = fib(n - 1) + fib(n - 2);
        memo.put(n, result);
        return result;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        System.out.println(fib(N));
    }
}

