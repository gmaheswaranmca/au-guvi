05 
"Sudoku Solver", 
"Implement a backtracking algorithm 
 to solve a given 9x9 Sudoku puzzle.", 
 "Medium", 
 "GeeksforGeeks, Google"
----------------------------------
Problem Title: Sudoku Solver

Problem Description:
    Given a partially filled 9x9 Sudoku board, 
    complete the board so that every row, column, and 
    each of the nine 3x3 subgrids contains 
    all the digits from 1 to 9 exactly once. 
    
    Empty cells are denoted by the character '.' (dot). 
    
    Implement a backtracking algorithm to solve the puzzle.

Input Format:
    - The input consists of 9 lines, 
      each containing 9 characters separated by spaces.
    - Each character is either a digit from '1' to '9' or 
      '.' representing an empty cell.

Output Format:
    - Output the solved Sudoku board 
      in the same format as the input: 9 lines, 
      each with 9 characters separated by spaces.

Constraints:
- The input board will have a unique solution.
- 1 ≤ Number of empty cells ≤ 64

Sample Input:
5 3 . . 7 . . . .
6 . . 1 9 5 . . .
. 9 8 . . . . 6 .
8 . . . 6 . . . 3
4 . . 8 . 3 . . 1
7 . . . 2 . . . 6
. 6 . . . . 2 8 .
. . . 4 1 9 . . 5
. . . . 8 . . 7 9

Sample Input:
5 3 . . 7 . . . .   
6 . . 1 9 5 . . .
. 9 8 . . . . 6 .
8 . . . 6 . . . 3
4 . . 8 . 3 . . 1
7 . . . 2 . . . 6
. 6 . . . . 2 8 .
. . . 4 1 9 . . 5
. . . . 8 . . 7 9

Sample Output:
5 3 4 6 7 8 9 1 2
6 7 2 1 9 5 3 4 8
1 9 8 3 4 2 5 6 7
8 5 9 7 6 1 4 2 3
4 2 6 8 5 3 7 9 1
7 1 3 9 2 4 8 5 6
9 6 1 5 3 7 2 8 4
2 8 7 4 1 9 6 3 5
3 4 5 2 8 6 1 7 9

Sample Explanation:
The empty cells are filled such that every row, column, and 
3x3 subgrid contains all digits from 1 to 9 exactly once.

Difficulty: Medium

Test Cases:

Test Case 1:
Input:
. . . 2 6 . 7 . 1
6 8 . . 7 . . 9 .
1 9 . . . 4 5 . .
8 2 . 1 . . . 4 .
. . 4 6 . 2 9 . .
. 5 . . . 3 . 2 8
. . 9 3 . . . 7 4
. 4 . . 5 . . 3 6
7 . 3 . 1 8 . . .
Output:
4 3 5 2 6 9 7 8 1
6 8 2 5 7 1 4 9 3
1 9 7 8 3 4 5 6 2
8 2 6 1 9 5 3 4 7
3 7 4 6 8 2 9 1 5
9 5 1 7 4 3 6 2 8
5 1 9 3 2 6 8 7 4
2 4 8 9 5 7 1 3 6
7 6 3 4 1 8 2 5 9

Test Case 2:
Input:
. 2 . . 9 . . . 1
. . . 5 . 1 8 . .
. . 7 . . . . 3 .
. . . . . 6 . . 7
. 6 . 2 . 7 . 9 .
7 . . 9 . . . . .
. 9 . . . . 6 . .
. . 1 8 . 5 . . .
8 . . . 6 . . 1 .
Output:
5 2 8 3 9 7 4 6 1
3 4 6 5 2 1 8 7 9
9 1 7 6 8 4 2 3 5
1 8 9 4 5 6 3 2 7
4 6 5 2 1 7 7 9 8
7 3 2 9 3 8 1 5 4
2 9 4 1 7 3 6 8 5
6 5 1 8 4 5 9 4 3
8 7 3 7 6 2 5 1 2

Test Case 3:
Input:
. . . . . . . . .
. . . . . . . . .
. . . . . . . . .
. . . . . . . . .
. . . . . . . . .
. . . . . . . . .
. . . . . . . . .
. . . . . . . . .
. . . . . . . . .
Output:
1 2 3 4 5 6 7 8 9
4 5 6 7 8 9 1 2 3
7 8 9 1 2 3 4 5 6
2 3 4 5 6 7 8 9 1
5 6 7 8 9 1 2 3 4
8 9 1 2 3 4 5 6 7
3 4 5 6 7 8 9 1 2
6 7 8 9 1 2 3 4 5
9 1 2 3 4 5 6 7 8

Test Case 4:
Input:
2 . . 3 . . . . .
8 . 4 . 6 . . . 3
. 1 3 8 . . . 4 .
. . . . . 2 . . .
. 9 . . . . . 7 .
. . . 6 . . . . .
. 2 . . . 9 8 1 .
6 . . . 2 . 7 . 4
. . . . . 1 . . 6
Output:
2 6 7 3 1 4 5 8 9
8 5 4 9 6 7 1 2 3
9 1 3 8 5 2 6 4 7
4 3 6 7 8 2 9 5 1
5 9 2 1 4 3 3 7 8
1 7 8 6 9 5 4 3 2
3 2 5 4 7 9 8 1 6
6 8 1 5 2 8 7 9 4
7 4 9 2 3 1 2 6 5

Test Case 5:
Input:
. . 5 3 . . . . .
8 . . . . . . 2 .
. 7 . . 1 . 5 . .
4 . . . . 5 3 . .
. 1 . . 7 . . . 6
. . 3 2 . . . 8 .
. 6 . 5 . . . . 9
. . 4 . . . . 3 .
. . . . . 9 7 . .
Output:
1 4 5 3 2 7 6 9 8
8 3 9 6 5 4 1 2 7
6 7 2 9 1 8 5 4 3
4 9 6 1 8 5 3 7 2
3 1 7 4 7 2 9 5 6
5 2 3 2 9 6 4 8 1
7 6 1 5 4 3 8 2 9
9 5 4 7 6 1 2 3 8
2 8 8 8 3 9 7 1 5

----------------------------------

/* Java Solution */
import java.util.*;

public class SudokuSolver {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        char[][] board = new char[9][9];
        for (int i = 0; i < 9; i++) {
            String[] line = sc.nextLine().trim().split("\\s+");
            for (int j = 0; j < 9; j++) {
                board[i][j] = line[j].charAt(0);
            }
        }
        solveSudoku(board);
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.print(board[i][j]);
                if (j < 8) System.out.print(" ");
            }
            System.out.println();
        }
    }

    public static boolean solveSudoku(char[][] board) {
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                if (board[row][col] == '.') {
                    for (char c = '1'; c <= '9'; c++) {
                        if (isValid(board, row, col, c)) {
                            board[row][col] = c;
                            if (solveSudoku(board)) return true;
                            board[row][col] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    private static boolean isValid(char[][] board, int row, int col, char c) {
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == c) return false;
            if (board[i][col] == c) return false;
            if (board[3*(row/3)+i/3][3*(col/3)+i%3] == c) return false;
        }
        return true;
    }
}
