"Implement a General Tree", 
"Write code to implement a general (n-ary) tree with insert, delete, and traversal operations.", 
"Easy", 
"LeetCode, HackerRank"

----------------------------------

Problem Title:
Implement a General (N-ary) Tree

Problem Description:
Design and implement a general (n-ary) tree data structure that supports the following operations:
1. Insert a node as a child of a given parent node.
2. Delete a node and all its descendants.
3. Traverse the tree in pre-order and post-order.

Input Format:
- The first line contains an integer n, the number of operations.
- The next n lines each contain an operation in one of the following formats:
    - "insert parent value": Insert a node with value as a child of the node with value parent.
    - "delete value": Delete the node with value and all its descendants.
    - "preorder": Output the pre-order traversal of the tree.
    - "postorder": Output the post-order traversal of the tree.

Output Format:
- For each "preorder" or "postorder" operation, output a single line with the traversal result (space-separated node values).

Constraints:
- 1 <= n <= 1000
- All node values are unique positive integers.
- The root node has value 1 and is created before any operation.
- It is guaranteed that insert and delete operations reference existing nodes.

Sample Input:
7
insert 1 2
insert 1 3
insert 2 4
insert 2 5
preorder
delete 2
preorder

Sample Output:
1 2 4 5 3
1 3

Explanation:
- After inserting nodes, the tree is:
      1
     / \
    2   3
   / \
  4   5
- Pre-order traversal: 1 2 4 5 3
- After deleting node 2 and its descendants, the tree is:
      1
       \
        3
- Pre-order traversal: 1 3

Difficulty:
Easy

Test Cases:
#1.
Input:
5
insert 1 2
insert 2 3
preorder
delete 2
preorder

Output:
1 2 3
1

#2.
Input:
6
insert 1 2
insert 1 3
insert 3 4
postorder
delete 3
preorder

Output:
2 4 3 1
1 2

#3.
Input:
4
insert 1 2
insert 2 3
postorder
preorder

Output:
3 2 1
1 2 3

#4.
Input:
3
preorder
insert 1 2
preorder

Output:
1
1 2

#5.
Input:
8
insert 1 2
insert 1 3
insert 2 4
insert 3 5
preorder
delete 3
postorder

Output:
1 2 4 3 5
4 2 1
