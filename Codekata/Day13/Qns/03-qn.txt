03
"Kth Largest Element in an Array", 
"Find the kth largest element in an unsorted array using a heap.", 
"Medium", 
"LeetCode, Facebook, Amazon"

----------------------------------
Problem Title:
Kth Largest Element in an Array

Problem Description:
Given an unsorted array of integers and an integer k, find the kth largest element in the array. The kth largest element is the element that would be in the kth position if the array was sorted in descending order. Note that it is the kth largest element in sorted order, not the kth distinct element.

Input Format:
- The first line contains two integers n and k, where n is the number of elements in the array.
- The second line contains n space-separated integers representing the elements of the array.

Output Format:
- Output a single integer, the kth largest element in the array.

Constraints:
- 1 ≤ n ≤ 10^5
- 1 ≤ k ≤ n
- -10^9 ≤ array[i] ≤ 10^9

Sample Input:
6 2
3 2 1 5 6 4     

Sample Output:
5

Explanation:
The sorted array in descending order is [6, 5, 4, 3, 2, 1]. The 2nd largest element is 5.

Difficulty:
Medium

Test Cases:
Test Case 1:
Input:
5 1
7 10 4 3 20
Output:
20

Test Case 2:
Input:
5 3
7 10 4 3 20
Output:
7

Test Case 3:
Input:
8 4
12 35 1 10 34 1 7 8
Output:
10

Test Case 4:
Input:
3 2
-1 -2 -3
Output:
-2

Test Case 5:
Input:
10 5
5 3 8 6 2 9 1 7 4 10
Output:
6

------------------------------------------------

import java.util.*;
public class KthLargest {
    private static int findMax(List<Integer> arr, int k) {
        PriorityQueue<Integer> heap = new PriorityQueue<>(k);//min heap
        for(int I =0 ; I < k; I++) {
            heap.offer(arr.get(I));
        }
        for(int I = k; I < arr.size(); I++) {
            if(arr.get(I) > heap.peek()) {
                heap.poll(); 
                heap.offer(arr.get(I));
            }
        }
        return heap.peek();
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        scanner.nextLine();
        String secondLine = scanner.nextLine();
        List<Integer> arr = new ArrayList<>(n);
        for(String e : secondLine.trim().split(" ")) {
            arr.add(Integer.parseInt(e));
        }
        System.out.print(findMax(arr, k));
        scanner.close();
    }
}

