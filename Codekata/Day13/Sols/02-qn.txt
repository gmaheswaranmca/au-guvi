import java.util.*;
class HeapSorting {
    private void swap(List<Integer> arr, int I, int J) {
        int temp = arr.get(I);
        arr.set(I, arr.get(J));
        arr.set(J, temp);
    }
    private void heapify(List<Integer> arr, int N, int nodeIndex) {
        int maxIndex = nodeIndex;
        int leftIndex = nodeIndex * 2 + 1;
        int rightIndex = nodeIndex * 2 + 2;
        if(leftIndex < N && arr.get(leftIndex) > arr.get(maxIndex)) {
            maxIndex = leftIndex;
        }
        if(rightIndex < N && arr.get(rightIndex) > arr.get(maxIndex)) {
            maxIndex = rightIndex;
        }
        if(maxIndex != nodeIndex) {
            swap(arr, nodeIndex, maxIndex);
            heapify(arr, N, maxIndex);
        }
    }
    private void buildHeap(List<Integer> arr) {
        for(int I = arr.size() / 2 - 1; I >= 0; I--) {
            heapify(arr, arr.size(), I);
        }
    }
    public void sort(List<Integer> arr) {
        buildHeap(arr);
        swap(arr, 0, arr.size()-1);//
        int N = arr.size() - 1;
        while(N > 1) {
            heapify(arr,N, 0);
            swap(arr, 0, N-1);
            N--;
        }
    }
}
public class HeapSortMain {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> arr = new ArrayList<>();
        scanner.nextLine();
        String secondLine = scanner.nextLine();
        for(String numStr : secondLine.trim().split(" ")) {
            arr.add(Integer.parseInt(numStr));
        } 
        HeapSorting sorting = new HeapSorting();
        sorting.sort(arr);
        for(int num : arr) {
            System.out.print(num + " ");
        }
        scanner.close();
    }
}


==============================================



import java.util.Scanner;

public class HeapSortSolution {
    // Heapify a subtree rooted with node i which is an index in arr[]
    static void heapify(int[] arr, int n, int i) {
        int largest = i; // Initialize largest as node
        int left = 2 * i + 1; // left child
        int right = 2 * i + 2; // right child

        // If left child is larger than largest
        if (left < n && arr[left] > arr[largest])
            largest = left;

        // If right child is larger than largest so far
        if (right < n && arr[right] > arr[largest])
            largest = right;

        // If largest is not root
        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;

            // Recursively heapify the affected sub-tree
            heapify(arr, n, largest);
        }
    }

    // Main function to do heap sort
    static void heapSort(int[] arr, int n) {
        // Build heap (rearrange array)
        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(arr, n, i);

        // One by one extract elements from heap
        for (int i = n - 1; i >= 0; i--) {
            // Move current root to end
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // call max heapify on the reduced heap
            heapify(arr, i, 0);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++)
            arr[i] = sc.nextInt();

        heapSort(arr, n);

        for (int i = 0; i < n; i++) {
            System.out.print(arr[i]);
            if (i != n - 1) System.out.print(" ");
        }
        System.out.println();
    }
}

------------------------------------------------------

Detailed step-by-step explanation of the code:

---

1. Imports
```java
import java.util.*;
```
- Imports all classes from `java.util`, including `Scanner` and `ArrayList`.

---

2. HeapSorting Class

a. swap Method
```java
private void swap(List<Integer> arr, int I, int J)
```
- Swaps elements at indices `I` and `J` in the list `arr`.
- Uses a temporary variable to hold one value during the swap.

b. heapify Method
```java
private void heapify(List<Integer> arr, int N, int nodeIndex)
```
- Ensures the subtree rooted at `nodeIndex` is a max-heap (parent is larger than children).
- `N` is the size of the heap (may be less than the array size during sorting).
- Calculates left and right child indices.
- Compares parent with children, finds the largest, and swaps if needed.
- Recursively heapifies the affected subtree if a swap occurs.

c. buildHeap Method
```java
private void buildHeap(List<Integer> arr)
```
- Converts the entire list into a max-heap.
- Starts from the last non-leaf node and calls `heapify` for each node up to the root.
- This ensures all parent nodes are larger than their children.

d. sort Method
```java
public void sort(List<Integer> arr)
```
- Step 1: Calls `buildHeap` to create a max-heap.
- Step 2: Swaps the root (largest element) with the last element.
- Step 3: Reduces the heap size (`N`) by 1.
- Step 4: Repeatedly heapifies the root and swaps the new root with the last unsorted element, shrinking the heap each time.
- Step 5: Continues until the heap size is 1, resulting in a sorted array.

---

3. HeapSortMain Class

a. main Method
```java
public static void main(String[] args)
```
- Reads input from the user:
  - First line: number of elements (`n`).
  - Second line: space-separated integers.
- Parses the integers into a `List<Integer>`.
- Creates a `HeapSorting` object and calls its `sort` method.
- Prints the sorted list.
- Closes the scanner.

---

4. Key Concepts

- Heap Sort: An efficient, comparison-based sorting algorithm using a binary heap data structure.
- Max-Heap: Each parent node is greater than or equal to its children.
- In-place: The sorting is done within the original list, using swaps.

---

5. Potential Gotchas

- The initial swap in `sort` (before the loop) is non-standard and may cause the first element to be out of order. Normally, the swap and heapify are both inside the loop.
- The code expects the user to enter the correct number of integers as specified by `n`.

---

6. Example Input/Output

Input:
```
5
4 1 3 9 7
```
Output:
```
1 3 4 7 9 
```
