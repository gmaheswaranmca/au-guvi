Heap Data Structure Notes
=========================
    1. Definition:
        - A heap is a specialized tree-based data structure that satisfies the heap property.
        - Types: Max Heap (parent >= children), Min Heap (parent <= children).

    2. Properties:
        - Complete binary tree: All levels are filled except possibly the last, which is filled from left to right.
        - Heap property: For max heap, every parent node is greater than or equal to its children; for min heap, every parent is less than or equal to its children.

    3. Representation:
        - Usually implemented as an array.
        - For node at index i:
        - Left child: 2*i + 1
        - Right child: 2*i + 2
        - Parent: (i - 1) // 2

    4. Operations:
        - Insertion: Add at the end, then "heapify up" to restore heap property.
        - Deletion (usually root): Replace root with last element, remove last, then "heapify down".
        - Peek: Return root element (max or min).
        - Heapify: Convert an array into a heap.

    5. Time Complexities:
        - Insertion: O(log n)
        - Deletion: O(log n)
        - Peek: O(1)
        - Heapify: O(n)

    6. Applications:
        - Priority queues
        - Heap sort
        - Graph algorithms (Dijkstra's, Prim's)
        - Scheduling

    7. Example (Min Heap):
        Array: [1, 3, 5, 7, 9, 8]
                 1
                / \
               3   5
              / \  /
             7  9 8

    8. Heap Sort:
        - Build a heap from the array.
        - Repeatedly remove the root and rebuild the heap.

    References:
    - CLRS: Introduction to Algorithms
    - https://en.wikipedia.org/wiki/Heap_(data_structure)


Priority Queue Notes
====================
    1. Definition:
        - A priority queue is an abstract data type where each element has a priority.
        - Elements are served based on priority (highest or lowest), not just insertion order.

    2. Implementation:
        - Commonly implemented using heaps (binary heap, Fibonacci heap).
        - Can also be implemented with arrays or linked lists (less efficient).

    3. Operations:
        - Insert: Add an element with a given priority.
        - Extract (Pop): Remove and return the element with the highest (or lowest) priority.
        - Peek: Return the element with the highest (or lowest) priority without removing it.
        - Change Priority: Update the priority of an element (optional, depends on implementation).

    4. Time Complexities (using binary heap):
        - Insert: O(log n)
        - Extract: O(log n)
        - Peek: O(1)

    5. Applications:
        - Task scheduling
        - Dijkstra's shortest path algorithm
        - Huffman coding
        - Event-driven simulation

    6. Example:
        - Elements: [(A, 2), (B, 1), (C, 3)]
        - After inserting: [(C, 3), (A, 2), (B, 1)] (if max-priority queue)

----------------------------------

"Kth Largest Element in an Array", 
"Find the kth largest element in an unsorted array using a heap.", 
"Medium", 
"LeetCode, Facebook, Amazon"

----------------------------------

Problem Title:
Kth Largest Element in an Array

Problem Description:
Given an unsorted array of integers and an integer k, find the kth largest element in the array. The kth largest element is the element that would be in the kth position if the array was sorted in descending order. Note that it is the kth largest element in sorted order, not the kth distinct element.

Input Format:
- The first line contains two integers n and k, where n is the number of elements in the array.
- The second line contains n space-separated integers representing the elements of the array.

Output Format:
- Output a single integer, the kth largest element in the array.

Constraints:
- 1 ≤ n ≤ 10^5
- 1 ≤ k ≤ n
- -10^9 ≤ array[i] ≤ 10^9

Sample Input:
6 2
3 2 1 5 6 4

Sample Output:
5

Explanation:
The sorted array in descending order is [6, 5, 4, 3, 2, 1]. The 2nd largest element is 5.

Difficulty:
Medium

Test Cases:
Test Case 1:
Input:
5 1
7 10 4 3 20
Output:
20

Test Case 2:
Input:
5 3
7 10 4 3 20
Output:
7

Test Case 3:
Input:
8 4
12 35 1 10 34 1 7 8
Output:
10

Test Case 4:
Input:
3 2
-1 -2 -3
Output:
-2

Test Case 5:
Input:
10 5
5 3 8 6 2 9 1 7 4 10
Output:
6

----------------------------------

import java.util.PriorityQueue;
import java.util.Scanner;

public class KthLargestElement {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
        }
        System.out.println(findKthLargest(nums, k));
    }

    public static int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k);
        for (int num : nums) {
            if (minHeap.size() < k) {
                minHeap.offer(num);
            } else if (num > minHeap.peek()) {
                minHeap.poll();
                minHeap.offer(num);
            }
        }
        return minHeap.peek();
    } 
}

----------------------------------