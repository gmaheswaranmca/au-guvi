KMP Algorithm (Knuth-Morris-Pratt) - String Matching Notes

1. Purpose:
    - Efficiently finds occurrences of a "pattern" string within a "text" string.
    - Avoids unnecessary re-examination of characters after a mismatch.

2. Key Idea:
    - Preprocess the pattern to create an LPS (Longest Prefix Suffix) array.
    - Use the LPS array to skip characters in the pattern/text after a mismatch.

3. LPS Array:
    - For each position in the pattern, LPS[i] stores the length of the longest proper prefix which is also a suffix for the substring pattern[0..i].
    - Helps to know how many characters can be skipped.

4. Steps:
    a) Preprocess the pattern to build the LPS array (O(M), where M = pattern length).
    b) Scan the text using the pattern and LPS array (O(N), where N = text length).

5. Time Complexity:
    - Preprocessing: O(M)
    - Searching: O(N)
    - Overall: O(N + M)

6. Example:
    Pattern: "ABABCABAB"
    LPS:    [0,0,1,2,0,1,2,3,4]

7. Pseudocode:

    function KMP(text, pattern):
         lps = computeLPS(pattern)
         i = 0, j = 0
         while i < len(text):
              if text[i] == pattern[j]:
                    i++, j++
                    if j == len(pattern):
                         // Match found at i-j
                         j = lps[j-1]
              else:
                    if j != 0:
                         j = lps[j-1]
                    else:
                         i++

    function computeLPS(pattern):
         lps = [0] * len(pattern)
         length = 0
         i = 1
         while i < len(pattern):
              if pattern[i] == pattern[length]:
                    length += 1
                    lps[i] = length
                    i += 1
              else:
                    if length != 0:
                         length = lps[length-1]
                    else:
                         lps[i] = 0
                         i += 1
         return lps


Let’s take an example pattern:  
**"ABABAC"**

Here’s how you build the LPS array step by step:

| Index (i) | Pattern[i] | LPS[i] | Prefix matched so far | Explanation                                   |
|-----------|------------|--------|----------------------|-----------------------------------------------|
| 0         | A          | 0      | -                    | No prefix/suffix                              |
| 1         | B          | 0      | -                    | No prefix/suffix                              |
| 2         | A          | 1      | A                    | 'A' matches prefix                            |
| 3         | B          | 2      | AB                   | 'AB' matches prefix                           |
| 4         | A          | 3      | ABA                  | 'ABA' matches prefix                          |
| 5         | C          | 0      | -                    | No prefix/suffix (mismatch, reset to 0)       |

**How to read this:**  
- LPS[2] = 1 means: For substring "ABA", the longest prefix which is also a suffix is "A" (length 1).
- LPS[4] = 3 means: For substring "ABABA", the longest prefix which is also a suffix is "ABA" (length 3).

**Final LPS array for "ABABAC":**  
`[0, 0, 1, 2, 3, 0]`

8. Applications:
    - Text editors (find/replace)
    - DNA sequence analysis
    - Plagiarism detection

References:
- Knuth, D.E., Morris, J.H., Pratt, V.R. (1977). Fast Pattern Matching in Strings.
- https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/



Rabin-Karp Algorithm - String Matching Notes

1. Purpose:
    - Efficiently finds all occurrences of a "pattern" string within a "text" string.
    - Uses hashing to compare substrings, allowing for fast matching.

2. Key Idea:
    - Compute a hash value for the pattern and for each substring of the text of the same length.
    - If the hash values match, do a direct character comparison to confirm a match (to handle hash collisions).

3. Hashing:
    - Typically uses a rolling hash function (e.g., polynomial rolling hash).
    - Allows efficient computation of hash for the next substring in O(1) time.

4. Steps:
    a) Compute the hash of the pattern (pat_hash).
    b) Compute the hash of the first window of text (txt_hash).
    c) Slide the window over the text:
        - If pat_hash == txt_hash, check characters one by one to confirm.
        - Update txt_hash for the next window using the rolling hash formula.

5. Time Complexity:
    - Average: O(N + M) (with a good hash function and low collision probability)
    - Worst-case: O(NM) (if many hash collisions)
    - N = text length, M = pattern length

6. Example:
    Pattern: "abc"
    Text: "abdabcbabc"
    - Compute hash for "abc" and for each substring of length 3 in the text.
    - Compare hashes and verify matches.

7. Pseudocode:

    function RabinKarp(text, pattern, d, q):
        n = len(text)
        m = len(pattern)
        h = pow(d, m-1) % q
        p = 0  // hash value for pattern
        t = 0  // hash value for text window

        // Preprocessing
        for i in range(m):
            p = (d * p + ord(pattern[i])) % q
            t = (d * t + ord(text[i])) % q

        // Matching
        for i in range(n - m + 1):
            if p == t:
                if text[i:i+m] == pattern:
                    // Match found at i
            if i < n - m:
                t = (d * (t - ord(text[i]) * h) + ord(text[i + m])) % q
                if t < 0:
                    t += q

    // d: number of possible characters (e.g., 256 for ASCII)
    // q: a large prime number to reduce collisions

8. Applications:
    - Plagiarism detection
    - Detecting patterns in large texts
    - Searching for multiple patterns (with modifications)

References:
- Rabin, M.O., Karp, R.M. (1987). Efficient randomized pattern-matching algorithms.
- https://www.geeksforgeeks.org/rabin-karp-algorithm-for-pattern-searching/


Z-Algorithm - String Matching Notes

1. Purpose:
    - Efficiently computes the Z-array for a string.
    - Finds all occurrences of a "pattern" in a "text" in linear time.

2. Key Idea:
    - The Z-array for a string S of length n is an array Z where Z[i] is the length of the longest substring starting at S[i] which is also a prefix of S.
    - Useful for pattern matching by concatenating "pattern$text" and computing Z.

3. Z-Array:
    - Z[0] = 0 (by convention).
    - For i > 0, Z[i] = length of the longest prefix starting at S[i] that matches the prefix of S.

4. Steps:
    a) Concatenate pattern + special character + text (e.g., "PATTERN$TEXT").
    b) Compute the Z-array for the concatenated string.
    c) Whenever Z[i] equals the pattern length, a match is found at position i - pattern_length - 1 in the text.

5. Time Complexity:
    - Z-array computation: O(N), where N = length of concatenated string.
    - Overall: O(N + M), where M = pattern length, N = text length.

6. Example:
    Pattern: "abc"
    Text: "abxabcabcaby"
    Concatenated: "abc$abxabcabcaby"
    Z:     [0,0,0,0,3,0,0,3,0,0,3,0,0,0,0]

7. Pseudocode:

    function ZAlgorithm(s):
        n = len(s)
        Z = [0] * n
        l, r = 0, 0
        for i in range(1, n):
            if i <= r:
                Z[i] = min(r - i + 1, Z[i - l])
            while i + Z[i] < n and s[Z[i]] == s[i + Z[i]]:
                Z[i] += 1
            if i + Z[i] - 1 > r:
                l, r = i, i + Z[i] - 1
        return Z

8. Applications:
    - Pattern matching in linear time.
    - Finding repetitions and periodicities in strings.
    - Computing runs and borders in strings.

References:
- Gusfield, D. (1997). Algorithms on Strings, Trees, and Sequences.
- https://cp-algorithms.com/string/z-function.html

