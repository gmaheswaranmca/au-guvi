-  A graph is a non-linear data structure 
   made up of vertices (nodes) and edges (connections). 
   It is used to represent networks 
   like social connections, maps, the internet, 
   dependency structures, and more.
    ðŸ”¹ Types of Graphs:
        * Directed vs Undirected: Edges have direction or not.
        * Weighted vs Unweighted: Edges may carry weights (e.g., distances, costs).
        * Cyclic vs Acyclic: May or may not contain cycles.
        * Connected vs Disconnected: Whether all nodes are reachable from each other.
        * Simple vs Multigraph: No multiple edges between the same pair vs allowing them.

    ðŸ”¹ Representation:
        * Adjacency Matrix: 2D array showing connections.
        * Adjacency List: List of nodes with their neighbors (space-efficient).

    ðŸ”¹ Applications:
        * Shortest path finding (Dijkstra, Bellman-Ford)
        * Topological sort (DAG)
        * Network routing
        * Cycle detection
        * Social network analysis
        * Game AI and puzzles


----------------------------------

"Find Path in Undirected Graph", 
"Given an undirected graph and two nodes, determine if there is a path between them using DFS or BFS.", 
"Easy", 
"LeetCode, HackerRank, Google"

----------------------------------

Problem Title:
Find Path in Undirected Graph

Problem Description:
Given an undirected graph represented as a list of edges and two distinct nodes, determine if there exists a path between the two nodes. You may use either Depth-First Search (DFS) or Breadth-First Search (BFS) to solve this problem.

Input Format:
- The first line contains two integers n and m, where n is the number of nodes (numbered from 0 to n-1), and m is the number of edges.
- The next m lines each contain two integers u and v, representing an undirected edge between nodes u and v.
- The last line contains two integers start and end, representing the nodes between which you need to determine if a path exists.

Output Format:
- Print "Yes" if there is a path between start and end, otherwise print "No".

Constraints:
- 2 â‰¤ n â‰¤ 10^5
- 1 â‰¤ m â‰¤ 2Ã—10^5
- 0 â‰¤ u, v, start, end < n
- u â‰  v
- The graph may contain self-loops and multiple edges.

Sample Input:
5 4
0 1
1 2
2 3
3 4
0 4

Sample Output:
Yes

Explanation:
There is a path from node 0 to node 4: 0-1-2-3-4.

Difficulty:
Easy

Five Test Cases:
Test Case 1:
Input:
4 2
0 1
2 3
0 3
Output:
No

Test Case 2:
Input:
3 3
0 1
1 2
2 0
0 2
Output:
Yes

Test Case 3:
Input:
6 5
0 1
1 2
2 3
3 4
4 5
0 5
Output:
Yes

Test Case 4:
Input:
5 2
0 1
3 4
0 4
Output:
No

Test Case 5:
Input:
2 1
0 1
0 1
Output:
Yes

----------------------------------

Java Solution: DFS using recursion

import java.util.*;

public class FindPathInUndirectedGraph {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) adj.add(new ArrayList<>());
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        int start = sc.nextInt();
        int end = sc.nextInt();
        boolean[] visited = new boolean[n];
        System.out.println(dfs(adj, visited, start, end) ? "Yes" : "No");
    }

    private static boolean dfs(List<List<Integer>> adj, boolean[] visited, int curr, int target) {
        if (curr == target) return true;
        visited[curr] = true;
        for (int neighbor : adj.get(curr)) {
            if (!visited[neighbor]) {
                if (dfs(adj, visited, neighbor, target)) return true;
            }
        }
        return false;
    }
}

---

Java Solution : BFS using queue

import java.util.*;

public class FindPathInUndirectedGraphBFS {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) adj.add(new ArrayList<>());
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        int start = sc.nextInt();
        int end = sc.nextInt();
        System.out.println(bfs(adj, n, start, end) ? "Yes" : "No");
    }

    private static boolean bfs(List<List<Integer>> adj, int n, int start, int end) {
        boolean[] visited = new boolean[n];
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        visited[start] = true;
        while (!queue.isEmpty()) {
            int node = queue.poll();
            if (node == end) return true;
            for (int neighbor : adj.get(node)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.offer(neighbor);
                }
            }
        }
        return false;
    }
}

---

Java Solution: DFS using stack (no recursion)

import java.util.*;

public class FindPathInUndirectedGraphDFSIterative {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) adj.add(new ArrayList<>());
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        int start = sc.nextInt();
        int end = sc.nextInt();
        System.out.println(dfsIterative(adj, n, start, end) ? "Yes" : "No");
    }

    private static boolean dfsIterative(List<List<Integer>> adj, int n, int start, int end) {
        boolean[] visited = new boolean[n];
        Stack<Integer> stack = new Stack<>();
        stack.push(start);
        while (!stack.isEmpty()) {
            int node = stack.pop();
            if (node == end) return true;
            if (!visited[node]) {
                visited[node] = true;
                for (int neighbor : adj.get(node)) {
                    if (!visited[neighbor]) {
                        stack.push(neighbor);
                    }
                }
            }
        }
        return false;
    }
}