import java.util.*;

public class Main {
    static class Node {
        int value;
        Node left, right;
        Node(int value) {
            this.value = value;
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        Node[] nodes = new Node[N + 1];
        for (int i = 1; i <= N; i++) {
            int val = sc.nextInt();
            nodes[i] = new Node(val);
        }
        for (int i = 1; i <= N; i++) {
            sc.nextInt(); // value already read
            int left = sc.nextInt();
            int right = sc.nextInt();
            if (left != -1) nodes[i].left = nodes[left];
            if (right != -1) nodes[i].right = nodes[right];
        }
        List<Integer> result = zigzagOrder(nodes[1]);
        for (int i = 0; i < result.size(); i++) {
            if (i > 0) System.out.print(" ");
            System.out.print(result.get(i));
        }
    }

    static List<Integer> zigzagOrder(Node root) {
        List<Integer> res = new ArrayList<>();
        if (root == null) return res;
        Deque<Node> dq = new ArrayDeque<>();
        dq.add(root);
        boolean leftToRight = true;
        while (!dq.isEmpty()) {
            int size = dq.size();
            List<Integer> level = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                Node node;
                if (leftToRight) {
                    node = dq.pollFirst();
                    level.add(node.value);
                    if (node.left != null) dq.addLast(node.left);
                    if (node.right != null) dq.addLast(node.right);
                } else {
                    node = dq.pollLast();
                    level.add(node.value);
                    if (node.right != null) dq.addFirst(node.right);
                    if (node.left != null) dq.addFirst(node.left);
                }
            }
            res.addAll(level);
            leftToRight = !leftToRight;
        }
        return res;
    }
}