import java.util.*;
import java.io.*;

public class Main {
    static class SegmentTree {
        int n, k;
        long[] tree;
        int[] arr;

        SegmentTree(int[] arr, int k) {
            this.n = arr.length;
            this.k = k;
            this.arr = arr;
            tree = new long[4 * n];
            build(1, 0, n - 1);
        }

        long pow(int x) {
            if (k == 1) return x;
            if (k == 2) return 1L * x * x;
            return 1L * x * x * x;
        }

        void build(int node, int l, int r) {
            if (l == r) {
                tree[node] = pow(arr[l]);
            } else {
                int m = (l + r) / 2;
                build(2 * node, l, m);
                build(2 * node + 1, m + 1, r);
                tree[node] = tree[2 * node] + tree[2 * node + 1];
            }
        }

        void update(int node, int l, int r, int idx, int val) {
            if (l == r) {
                arr[idx] = val;
                tree[node] = pow(val);
            } else {
                int m = (l + r) / 2;
                if (idx <= m) update(2 * node, l, m, idx, val);
                else update(2 * node + 1, m + 1, r, idx, val);
                tree[node] = tree[2 * node] + tree[2 * node + 1];
            }
        }

        long query(int node, int l, int r, int ql, int qr) {
            if (qr < l || r < ql) return 0;
            if (ql <= l && r <= qr) return tree[node];
            int m = (l + r) / 2;
            return query(2 * node, l, m, ql, qr) + query(2 * node + 1, m + 1, r, ql, qr);
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] nqk = br.readLine().split(" ");
        int n = Integer.parseInt(nqk[0]);
        int q = Integer.parseInt(nqk[1]);
        int k = Integer.parseInt(nqk[2]);
        String[] arrStr = br.readLine().split(" ");
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) arr[i] = Integer.parseInt(arrStr[i]);
        SegmentTree st = new SegmentTree(arr, k);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < q; i++) {
            String[] parts = br.readLine().split(" ");
            if (parts[0].equals("1")) {
                int idx = Integer.parseInt(parts[1]) - 1;
                int val = Integer.parseInt(parts[2]);
                st.update(1, 0, n - 1, idx, val);
            } else {
                int l = Integer.parseInt(parts[1]) - 1;
                int r = Integer.parseInt(parts[2]) - 1;
                sb.append(st.query(1, 0, n - 1, l, r)).append('\n');
            }
        }
        System.out.print(sb);
    }
}