"Range Sum Query with Updates using Fenwick Tree", 
"Given an array, efficiently perform range sum queries and point updates.", 
"Medium", 
"LeetCode, Codeforces, Amazon"

----------------------------------
Problem Title:
Range Sum Query with Updates using Fenwick Tree

Problem Description:
You are given an array of integers of size N. You need to efficiently perform the following two types of operations:
1. Update the value at a specific index in the array.
2. Query the sum of elements in a given range [L, R] (inclusive).

Implement a data structure that supports these operations efficiently.

Input Format:
- The first line contains two integers N and Q, the size of the array and the number of queries.
- The second line contains N space-separated integers, representing the initial array.
- The next Q lines each contain a query in one of the following formats:
    - "1 X Y": Update the value at index X (0-based) to Y.
    - "2 L R": Output the sum of elements from index L to R (inclusive).

Output Format:
For each query of type 2, output the sum on a new line.

Constraints:
- 1 ≤ N, Q ≤ 10^5
- 0 ≤ X, L, R < N
- -10^9 ≤ array elements, Y ≤ 10^9
- L ≤ R

Sample Input:
5 5
1 2 3 4 5
2 1 3
1 2 10
2 0 2
1 4 7
2 3 4

Sample Output:
9
13
11

Explanation:
- Query 1: Sum from index 1 to 3 is 2 + 3 + 4 = 9.
- Query 2: Update index 2 to 10. Array becomes [1, 2, 10, 4, 5].
- Query 3: Sum from index 0 to 2 is 1 + 2 + 10 = 13.
- Query 4: Update index 4 to 7. Array becomes [1, 2, 10, 4, 7].
- Query 5: Sum from index 3 to 4 is 4 + 7 = 11.

Difficulty:
Medium

Five Test Cases:
Test Case 1:
Input:
3 3
5 8 6
2 0 2
1 1 3
2 0 1
Output:
19
8

Test Case 2:
Input:
4 4
1 1 1 1
2 0 3
1 2 5
2 1 2
2 0 0
Output:
4
6
1

Test Case 3:
Input:
6 2
2 4 6 8 10 12
2 2 5
2 0 3
Output:
36
20

Test Case 4:
Input:
2 2
100 200
2 0 1
1 0 50
Output:
300

Test Case 5:
Input:
5 3
-1 -2 -3 -4 -5
2 1 3
1 2 0
2 0 2
Output:
-9
-3
----------------------------------
