"Range Sum of Even Numbers using Segment Tree (Lazy Probagation)",
"Given an array, efficiently compute the sum of even numbers in a range with updates.", 
"Medium", 
"Codeforces, Amazon"

----------------------------------
Problem Title:
Range Sum of Even Numbers using Segment Tree (Lazy Propagation)

Problem Description:
You are given an array of N integers. You need to efficiently answer Q queries of two types:
1. Update the value at a given index to a new value.
2. Compute the sum of all even numbers in a given range [L, R] (inclusive).

To handle these queries efficiently, implement a Segment Tree with Lazy Propagation.

Input Format:
- The first line contains two integers N and Q, the size of the array and the number of queries.
- The second line contains N integers, the elements of the array.
- The next Q lines each contain a query:
    - For update: "1 X Y" (set the value at index X to Y, 1-based indexing)
    - For range sum: "2 L R" (compute the sum of even numbers from index L to R, inclusive, 1-based indexing)

Output Format:
For each range sum query, output the sum of even numbers in the specified range on a new line.

Constraints:
- 1 ≤ N, Q ≤ 10^5
- 1 ≤ Array elements, Y ≤ 10^9
- 1 ≤ X, L, R ≤ N

Sample Input:
6 5
2 3 4 5 6 7
2 2 5
1 3 10
2 1 6
1 5 9
2 4 6

Sample Output:
10
18
7

Explanation:
- Query 1: Sum of even numbers from index 2 to 5: 4 + 6 = 10
- Query 2: Update index 3 to 10. Array becomes [2, 3, 10, 5, 6, 7]
- Query 3: Sum of even numbers from index 1 to 6: 2 + 10 + 6 = 18
- Query 4: Update index 5 to 9. Array becomes [2, 3, 10, 5, 9, 7]
- Query 5: Sum of even numbers from index 4 to 6: No even numbers, so output is 0

Difficulty:
Medium

Five Test Cases:
Test Case 1:
Input:
5 3
1 2 3 4 5
2 1 5
1 2 8
2 1 3
Output:
6
8

Test Case 2:
Input:
4 4
2 4 6 8
2 1 4
1 3 5
2 2 4
2 1 2
Output:
20
12
6

Test Case 3:
Input:
3 2
1 3 5
2 1 3
2 2 3
Output:
0
0

Test Case 4:
Input:
7 5
2 4 6 8 10 12 14
2 1 7
1 4 7
2 3 5
1 7 9
2 6 7
Output:
56
16
12

Test Case 5:
Input:
6 4
1 2 3 4 5 6
2 1 6
1 6 7
2 4 6
2 2 5
Output:
12
4
6
----------------------------------
