"Range XOR Query using Segment Tree", 
"Given an array, answer range XOR queries and point updates efficiently.", 
"Medium", 
"Codeforces, Google"

----------------------------------
Problem Title:
Range XOR Query using Segment Tree

Problem Description:
You are given an array of N integers. You need to efficiently answer two types of queries:
1. Given a range [L, R], find the XOR of all elements in that range.
2. Update the value at a specific index to a new value.

Input Format:
- The first line contains two integers N and Q, the size of the array and the number of queries.
- The second line contains N integers, the elements of the array.
- The next Q lines each contain a query:
    - For a range query: "1 L R" (find XOR from index L to R, 1-based indexing)
    - For an update query: "2 X V" (update index X to value V, 1-based indexing)

Output Format:
For each range query, output the XOR value on a new line.

Constraints:
- 1 ≤ N, Q ≤ 10^5
- 1 ≤ Array elements, V ≤ 10^9
- 1 ≤ L ≤ R ≤ N
- 1 ≤ X ≤ N

Sample Input:
5 5
1 2 3 4 5
1 2 4
2 3 10
1 1 5
2 5 7
1 4 5

Sample Output:
5
8
3

Explanation:
- Query 1: XOR of elements from index 2 to 4: 2 ^ 3 ^ 4 = 5
- Query 2: Update index 3 to 10. Array becomes [1, 2, 10, 4, 5]
- Query 3: XOR of elements from index 1 to 5: 1 ^ 2 ^ 10 ^ 4 ^ 5 = 8
- Query 4: Update index 5 to 7. Array becomes [1, 2, 10, 4, 7]
- Query 5: XOR of elements from index 4 to 5: 4 ^ 7 = 3

Difficulty:
Medium

Five Test Cases:
Test Case 1:
Input:
4 3
1 1 1 1
1 1 4
2 2 2
1 1 4
Output:
0
0

Test Case 2:
Input:
6 4
5 7 9 3 6 2
1 2 5
2 4 8
1 3 6
1 1 6
Output:
7
9
1

Test Case 3:
Input:
3 2
8 8 8
1 1 3
2 1 0
Output:
8

Test Case 4:
Input:
7 5
1 2 4 8 16 32 64
1 1 7
2 7 0
1 1 7
2 1 0
1 1 7
Output:
127
63
63

Test Case 5:
Input:
2 2
1000000000 1000000000
1 1 2
2 2 0
Output:
0
----------------------------------
