"Two Sum", 
"Given an array of integers, return indices of the two numbers such that they add up to a specific target.", 
"Easy", 
"LeetCode, Amazon, Microsoft"
----------------------------------
Problem Title: Two Sum

Problem Description:
Given an array of integers and a target integer, return the indices of the two numbers such that they add up to the target. Assume that each input has exactly one solution, and you may not use the same element twice. Return the answer in any order.

Input Format:
- The first line contains an integer n, the number of elements in the array.
- The second line contains n space-separated integers, representing the array.
- The third line contains an integer, the target sum.

Output Format:
- Print two space-separated integers, the indices of the two numbers that add up to the target.

Constraints:
- 2 <= n <= 10^5
- -10^9 <= array[i] <= 10^9
- -10^9 <= target <= 10^9
- Exactly one solution exists.

Sample Input:
4
2 7 11 15
9

Sample Output:
0 1

Explanation:
The numbers at indices 0 and 1 (2 and 7) add up to 9.

Difficulty:
Easy

Five Test Cases:

Test Case 1:
Input:
5
1 3 4 2 6
5
Output:
1 3

Test Case 2:
Input:
3
-1 0 1
0
Output:
0 2

Test Case 3:
Input:
6
10 22 5 75 65 80
85
Output:
2 4

Test Case 4:
Input:
2
1000000000 -1000000000
0
Output:
0 1

Test Case 5:
Input:
7
3 2 4 6 8 1 7
10
Output:
3 4

-----------------------------------------------------

import java.util.*;
public class TwoSum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt(); 
        scanner.nextLine();
        String secondLine = scanner.nextLine();
        List<Integer> arr = new ArrayList<>(n);
        for(String numStr : secondLine.trim().split(" ")) {
            arr.add(Integer.parseInt(numStr));
        }
        int target = scanner.nextInt();
        Map<Integer,Integer> pairs = new HashMap<Integer,Integer>(n);
        for(int I = 0; I < arr.size(); I++) {
            int diff = target - arr.get(I);
            if(pairs.containsKey(diff)) {
                System.out.println(pairs.get(diff) + " " + I);
                break;
            }
            pairs.put(arr.get(I), I);
        }
        scanner.close();
    }
}
