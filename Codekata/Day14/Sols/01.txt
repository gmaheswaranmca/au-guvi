java implementation using Two Pointer Approach.

import java.util.*;

public class TwoSumTwoPointer {
    static class Pair {
        int value;
        int index;
        Pair(int value, int index) {
            this.value = value;
            this.index = index;
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Pair[] arr = new Pair[n];
        for (int i = 0; i < n; i++) {
            arr[i] = new Pair(sc.nextInt(), i);
        }
        int target = sc.nextInt();

        Arrays.sort(arr, Comparator.comparingInt(a -> a.value));
        int left = 0, right = n - 1;
        while (left < right) {
            int sum = arr[left].value + arr[right].value;
            if (sum == target) {
                int idx1 = arr[left].index;
                int idx2 = arr[right].index;
                System.out.println(Math.min(idx1, idx2) + " " + Math.max(idx1, idx2));
                return;
            } else if (sum < target) {
                left++;
            } else {
                right--;
            }
        }
    }
}

----------------------------------
java implementation using HashMap Approach.

import java.util.*;

public class TwoSumHashMap {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
        }
        int target = sc.nextInt();

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                System.out.println(map.get(complement) + " " + i);
                return;
            }
            map.put(nums[i], i);
        }
    }
}
