import java.util.*;

class BTreeNode {
    int[] keys;
    int t; // Minimum degree (ceil(m/2))
    BTreeNode[] children;
    int n;
    boolean leaf;

    BTreeNode(int m, boolean leaf) {
        this.t = (int) Math.ceil(m / 2.0);
        this.leaf = leaf;
        this.keys = new int[m - 1];
        this.children = new BTreeNode[m];
        this.n = 0;
    }

    void traverseLevelOrder(List<List<Integer>> levels) {
        Queue<BTreeNode> queue = new LinkedList<>();
        queue.add(this);
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> level = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                BTreeNode node = queue.poll();
                for (int j = 0; j < node.n; j++) {
                    level.add(node.keys[j]);
                }
                if (!node.leaf) {
                    for (int j = 0; j <= node.n; j++) {
                        if (node.children[j] != null)
                            queue.add(node.children[j]);
                    }
                }
            }
            if (!level.isEmpty())
                levels.add(level);
        }
    }
}

class BTree {
    BTreeNode root;
    int m;

    BTree(int m) {
        this.root = null;
        this.m = m;
    }

    void insert(int k) {
        if (root == null) {
            root = new BTreeNode(m, true);
            root.keys[0] = k;
            root.n = 1;
        } else {
            if (root.n == m - 1) {
                BTreeNode s = new BTreeNode(m, false);
                s.children[0] = root;
                splitChild(s, 0, root);
                int i = 0;
                if (s.keys[0] < k)
                    i++;
                insertNonFull(s.children[i], k);
                root = s;
            } else {
                insertNonFull(root, k);
            }
        }
    }

    void insertNonFull(BTreeNode node, int k) {
        int i = node.n - 1;
        if (node.leaf) {
            while (i >= 0 && node.keys[i] > k) {
                node.keys[i + 1] = node.keys[i];
                i--;
            }
            node.keys[i + 1] = k;
            node.n++;
        } else {
            while (i >= 0 && node.keys[i] > k)
                i--;
            i++;
            if (node.children[i].n == m - 1) {
                splitChild(node, i, node.children[i]);
                if (node.keys[i] < k)
                    i++;
            }
            insertNonFull(node.children[i], k);
        }
    }

    void splitChild(BTreeNode parent, int i, BTreeNode y) {
        BTreeNode z = new BTreeNode(m, y.leaf);
        int t = y.t;
        z.n = t - 1;
        for (int j = 0; j < t - 1; j++)
            z.keys[j] = y.keys[j + t];
        if (!y.leaf) {
            for (int j = 0; j < t; j++)
                z.children[j] = y.children[j + t];
        }
        y.n = t - 1;
        for (int j = parent.n; j >= i + 1; j--)
            parent.children[j + 1] = parent.children[j];
        parent.children[i + 1] = z;
        for (int j = parent.n - 1; j >= i; j--)
            parent.keys[j + 1] = parent.keys[j];
        parent.keys[i] = y.keys[t - 1];
        parent.n++;
    }

    void printLevelOrder() {
        List<List<Integer>> levels = new ArrayList<>();
        if (root != null)
            root.traverseLevelOrder(levels);
        for (List<Integer> level : levels) {
            for (int i = 0; i < level.size(); i++) {
                System.out.print(level.get(i));
                if (i != level.size() - 1)
                    System.out.print(" ");
            }
            System.out.println();
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        BTree btree = new BTree(m);
        for (int i = 0; i < n; i++) {
            int key = sc.nextInt();
            btree.insert(key);
        }
        btree.printLevelOrder();
    }
}