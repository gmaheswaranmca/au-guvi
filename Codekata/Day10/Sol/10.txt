import java.util.*;

class BTreeNode {
    int[] keys;
    int t;
    BTreeNode[] children;
    int n;
    boolean leaf;

    BTreeNode(int t, boolean leaf) {
        this.t = t;
        this.leaf = leaf;
        this.keys = new int[2 * t - 1];
        this.children = new BTreeNode[2 * t];
        this.n = 0;
    }

    int findKey(int k) {
        int idx = 0;
        while (idx < n && keys[idx] < k)
            ++idx;
        return idx;
    }

    void remove(int k) {
        int idx = findKey(k);

        if (idx < n && keys[idx] == k) {
            if (leaf)
                removeFromLeaf(idx);
            else
                removeFromNonLeaf(idx);
        } else {
            if (leaf)
                return;
            boolean flag = (idx == n);
            if (children[idx].n < t)
                fill(idx);
            if (flag && idx > n)
                children[idx - 1].remove(k);
            else
                children[idx].remove(k);
        }
    }

    void removeFromLeaf(int idx) {
        for (int i = idx + 1; i < n; ++i)
            keys[i - 1] = keys[i];
        n--;
    }

    void removeFromNonLeaf(int idx) {
        int k = keys[idx];
        if (children[idx].n >= t) {
            int pred = getPred(idx);
            keys[idx] = pred;
            children[idx].remove(pred);
        } else if (children[idx + 1].n >= t) {
            int succ = getSucc(idx);
            keys[idx] = succ;
            children[idx + 1].remove(succ);
        } else {
            merge(idx);
            children[idx].remove(k);
        }
    }

    int getPred(int idx) {
        BTreeNode cur = children[idx];
        while (!cur.leaf)
            cur = cur.children[cur.n];
        return cur.keys[cur.n - 1];
    }

    int getSucc(int idx) {
        BTreeNode cur = children[idx + 1];
        while (!cur.leaf)
            cur = cur.children[0];
        return cur.keys[0];
    }

    void fill(int idx) {
        if (idx != 0 && children[idx - 1].n >= t)
            borrowFromPrev(idx);
        else if (idx != n && children[idx + 1].n >= t)
            borrowFromNext(idx);
        else {
            if (idx != n)
                merge(idx);
            else
                merge(idx - 1);
        }
    }

    void borrowFromPrev(int idx) {
        BTreeNode child = children[idx];
        BTreeNode sibling = children[idx - 1];

        for (int i = child.n - 1; i >= 0; --i)
            child.keys[i + 1] = child.keys[i];
        if (!child.leaf) {
            for (int i = child.n; i >= 0; --i)
                child.children[i + 1] = child.children[i];
        }
        child.keys[0] = keys[idx - 1];
        if (!child.leaf)
            child.children[0] = sibling.children[sibling.n];
        keys[idx - 1] = sibling.keys[sibling.n - 1];
        child.n += 1;
        sibling.n -= 1;
    }

    void borrowFromNext(int idx) {
        BTreeNode child = children[idx];
        BTreeNode sibling = children[idx + 1];

        child.keys[child.n] = keys[idx];
        if (!child.leaf)
            child.children[child.n + 1] = sibling.children[0];
        keys[idx] = sibling.keys[0];
        for (int i = 1; i < sibling.n; ++i)
            sibling.keys[i - 1] = sibling.keys[i];
        if (!sibling.leaf) {
            for (int i = 1; i <= sibling.n; ++i)
                sibling.children[i - 1] = sibling.children[i];
        }
        child.n += 1;
        sibling.n -= 1;
    }

    void merge(int idx) {
        BTreeNode child = children[idx];
        BTreeNode sibling = children[idx + 1];

        child.keys[t - 1] = keys[idx];
        for (int i = 0; i < sibling.n; ++i)
            child.keys[i + t] = sibling.keys[i];
        if (!child.leaf) {
            for (int i = 0; i <= sibling.n; ++i)
                child.children[i + t] = sibling.children[i];
        }
        for (int i = idx + 1; i < n; ++i)
            keys[i - 1] = keys[i];
        for (int i = idx + 2; i <= n; ++i)
            children[i - 1] = children[i];
        child.n += sibling.n + 1;
        n--;
    }

    void traverse(List<Integer> res) {
        int i;
        for (i = 0; i < n; i++) {
            if (!leaf)
                children[i].traverse(res);
            res.add(keys[i]);
        }
        if (!leaf)
            children[i].traverse(res);
    }
}

class BTree {
    BTreeNode root;
    int t;

    BTree(int t) {
        this.root = null;
        this.t = t;
    }

    void traverse(List<Integer> res) {
        if (root != null)
            root.traverse(res);
    }

    void insert(int k) {
        if (root == null) {
            root = new BTreeNode(t, true);
            root.keys[0] = k;
            root.n = 1;
        } else {
            if (root.n == 2 * t - 1) {
                BTreeNode s = new BTreeNode(t, false);
                s.children[0] = root;
                splitChild(s, 0, root);
                int i = 0;
                if (s.keys[0] < k)
                    i++;
                insertNonFull(s.children[i], k);
                root = s;
            } else
                insertNonFull(root, k);
        }
    }

    void insertNonFull(BTreeNode node, int k) {
        int i = node.n - 1;
        if (node.leaf) {
            while (i >= 0 && node.keys[i] > k) {
                node.keys[i + 1] = node.keys[i];
                i--;
            }
            node.keys[i + 1] = k;
            node.n += 1;
        } else {
            while (i >= 0 && node.keys[i] > k)
                i--;
            i++;
            if (node.children[i].n == 2 * t - 1) {
                splitChild(node, i, node.children[i]);
                if (node.keys[i] < k)
                    i++;
            }
            insertNonFull(node.children[i], k);
        }
    }

    void splitChild(BTreeNode parent, int i, BTreeNode y) {
        BTreeNode z = new BTreeNode(y.t, y.leaf);
        z.n = t - 1;
        for (int j = 0; j < t - 1; j++)
            z.keys[j] = y.keys[j + t];
        if (!y.leaf) {
            for (int j = 0; j < t; j++)
                z.children[j] = y.children[j + t];
        }
        y.n = t - 1;
        for (int j = parent.n; j >= i + 1; j--)
            parent.children[j + 1] = parent.children[j];
        parent.children[i + 1] = z;
        for (int j = parent.n - 1; j >= i; j--)
            parent.keys[j + 1] = parent.keys[j];
        parent.keys[i] = y.keys[t - 1];
        parent.n += 1;
    }

    void remove(int k) {
        if (root == null)
            return;
        root.remove(k);
        if (root.n == 0) {
            if (root.leaf)
                root = null;
            else
                root = root.children[0];
        }
    }

    List<Integer> levelOrder() {
        List<Integer> res = new ArrayList<>();
        if (root == null)
            return res;
        Queue<BTreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            BTreeNode node = q.poll();
            for (int i = 0; i < node.n; i++)
                res.add(node.keys[i]);
            if (!node.leaf) {
                for (int i = 0; i <= node.n; i++)
                    if (node.children[i] != null)
                        q.add(node.children[i]);
            }
        }
        return res;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(), t = sc.nextInt();
        BTree tree = new BTree(t);
        for (int i = 0; i < n; i++)
            tree.insert(sc.nextInt());
        int q = sc.nextInt();
        int[] dels = new int[q];
        for (int i = 0; i < q; i++)
            dels[i] = sc.nextInt();
        for (int i = 0; i < q; i++) {
            tree.remove(dels[i]);
            List<Integer> res = tree.levelOrder();
            if (res.isEmpty())
                System.out.println("Empty");
            else {
                for (int j = 0; j < res.size(); j++) {
                    if (j > 0) System.out.print(" ");
                    System.out.print(res.get(j));
                }
                System.out.println();
            }
        }
    }
}