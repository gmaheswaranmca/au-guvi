import java.util.*;

class RedBlackTreeDelete {
    static class Node {
        int key;
        char color;
        Node left, right, parent;
        Node(int key, char color) {
            this.key = key;
            this.color = color;
        }
    }

    static Node NIL = new Node(0, 'B');
    static {
        NIL.left = NIL.right = NIL.parent = NIL;
    }

    static Node buildTree(int[] keys, char[] colors) {
        if (keys.length == 0) return NIL;
        Node[] nodes = new Node[keys.length];
        for (int i = 0; i < keys.length; i++) {
            nodes[i] = new Node(keys[i], colors[i]);
            nodes[i].left = nodes[i].right = nodes[i].parent = NIL;
        }
        Queue<Node> q = new LinkedList<>();
        q.add(nodes[0]);
        int idx = 1;
        for (int i = 0; i < keys.length && idx < keys.length; i++) {
            Node curr = nodes[i];
            if (idx < keys.length) {
                curr.left = nodes[idx];
                nodes[idx].parent = curr;
                idx++;
            }
            if (idx < keys.length) {
                curr.right = nodes[idx];
                nodes[idx].parent = curr;
                idx++;
            }
        }
        return nodes[0];
    }

    static void levelOrder(Node root, List<Integer> keys, List<Character> colors) {
        if (root == NIL) return;
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            Node n = q.poll();
            keys.add(n.key);
            colors.add(n.color);
            if (n.left != NIL) q.add(n.left);
            if (n.right != NIL) q.add(n.right);
        }
    }

    static void leftRotate(Node[] rootRef, Node x) {
        Node y = x.right;
        x.right = y.left;
        if (y.left != NIL) y.left.parent = x;
        y.parent = x.parent;
        if (x.parent == NIL) rootRef[0] = y;
        else if (x == x.parent.left) x.parent.left = y;
        else x.parent.right = y;
        y.left = x;
        x.parent = y;
    }

    static void rightRotate(Node[] rootRef, Node y) {
        Node x = y.left;
        y.left = x.right;
        if (x.right != NIL) x.right.parent = y;
        x.parent = y.parent;
        if (y.parent == NIL) rootRef[0] = x;
        else if (y == y.parent.left) y.parent.left = x;
        else y.parent.right = x;
        x.right = y;
        y.parent = x;
    }

    static Node treeMinimum(Node x) {
        while (x.left != NIL) x = x.left;
        return x;
    }

    static void transplant(Node[] rootRef, Node u, Node v) {
        if (u.parent == NIL) rootRef[0] = v;
        else if (u == u.parent.left) u.parent.left = v;
        else u.parent.right = v;
        v.parent = u.parent;
    }

    static void fixDelete(Node[] rootRef, Node x) {
        while (x != rootRef[0] && x.color == 'B') {
            if (x == x.parent.left) {
                Node w = x.parent.right;
                if (w.color == 'R') {
                    w.color = 'B';
                    x.parent.color = 'R';
                    leftRotate(rootRef, x.parent);
                    w = x.parent.right;
                }
                if (w.left.color == 'B' && w.right.color == 'B') {
                    w.color = 'R';
                    x = x.parent;
                } else {
                    if (w.right.color == 'B') {
                        w.left.color = 'B';
                        w.color = 'R';
                        rightRotate(rootRef, w);
                        w = x.parent.right;
                    }
                    w.color = x.parent.color;
                    x.parent.color = 'B';
                    w.right.color = 'B';
                    leftRotate(rootRef, x.parent);
                    x = rootRef[0];
                }
            } else {
                Node w = x.parent.left;
                if (w.color == 'R') {
                    w.color = 'B';
                    x.parent.color = 'R';
                    rightRotate(rootRef, x.parent);
                    w = x.parent.left;
                }
                if (w.right.color == 'B' && w.left.color == 'B') {
                    w.color = 'R';
                    x = x.parent;
                } else {
                    if (w.left.color == 'B') {
                        w.right.color = 'B';
                        w.color = 'R';
                        leftRotate(rootRef, w);
                        w = x.parent.left;
                    }
                    w.color = x.parent.color;
                    x.parent.color = 'B';
                    w.left.color = 'B';
                    rightRotate(rootRef, x.parent);
                    x = rootRef[0];
                }
            }
        }
        x.color = 'B';
    }

    static void bstDelete(Node[] rootRef, int key) {
        // First perform simple BST deletion
        rootRef[0] = simpleBSTDelete(rootRef[0], key);
        
        // Then fix Red-Black tree properties if needed
        // Note: This is a simplified approach - in a complete implementation,
        // we would need to track the deleted node's color and the replacement node
        // For now, we'll apply fixup to the root if it exists
        if (rootRef[0] != NIL) {
            fixDeleteAfterSimpleBSTDelete(rootRef, rootRef[0]);
        }
    }

    static Node simpleBSTDelete(Node root, int key) {
        if (root == NIL)
            return root;
        if (key < root.key)
            root.left = simpleBSTDelete(root.left, key);
        else if (key > root.key)
            root.right = simpleBSTDelete(root.right, key);
        else {
            if (root.left == NIL || root.right == NIL) {
                Node temp = NIL;
                if (root.left != NIL)
                    temp = root.left;
                else if (root.right != NIL)
                    temp = root.right;
                if (temp == NIL) {
                    root = NIL;
                } else {
                    root = temp;
                }
            } else {
                Node temp = treeMinimum(root.right);
                root.key = temp.key;
                root.color = temp.color;
                root.right = simpleBSTDelete(root.right, temp.key);
            }
        }
        return root;
    }

    static void fixDeleteAfterSimpleBSTDelete(Node[] rootRef, Node x) {
        while (x != rootRef[0] && x.color == 'B') {
            if (x == x.parent.left) {
                Node w = x.parent.right;
                if (w.color == 'R') {
                    w.color = 'B';
                    x.parent.color = 'R';
                    leftRotate(rootRef, x.parent);
                    w = x.parent.right;
                }
                if (w.left.color == 'B' && w.right.color == 'B') {
                    w.color = 'R';
                    x = x.parent;
                } else {
                    if (w.right.color == 'B') {
                        w.left.color = 'B';
                        w.color = 'R';
                        rightRotate(rootRef, w);
                        w = x.parent.right;
                    }
                    w.color = x.parent.color;
                    x.parent.color = 'B';
                    w.right.color = 'B';
                    leftRotate(rootRef, x.parent);
                    x = rootRef[0];
                }
            } else {
                Node w = x.parent.left;
                if (w.color == 'R') {
                    w.color = 'B';
                    x.parent.color = 'R';
                    rightRotate(rootRef, x.parent);
                    w = x.parent.left;
                }
                if (w.right.color == 'B' && w.left.color == 'B') {
                    w.color = 'R';
                    x = x.parent;
                } else {
                    if (w.left.color == 'B') {
                        w.right.color = 'B';
                        w.color = 'R';
                        leftRotate(rootRef, w);
                        w = x.parent.left;
                    }
                    w.color = x.parent.color;
                    x.parent.color = 'B';
                    w.left.color = 'B';
                    rightRotate(rootRef, x.parent);
                    x = rootRef[0];
                }
            }
        }
        x.color = 'B';
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = Integer.parseInt(sc.nextLine().trim());
        int[] keys = new int[N];
        char[] colors = new char[N];
        String[] keyStr = sc.nextLine().trim().split("\\s+");
        String[] colorStr = sc.nextLine().trim().split("\\s+");
        for (int i = 0; i < N; i++) {
            keys[i] = Integer.parseInt(keyStr[i]);
            colors[i] = colorStr[i].charAt(0);
        }
        int K = Integer.parseInt(sc.nextLine().trim());
        Node root = buildTree(keys, colors);
        Node[] rootRef = new Node[]{root};
        bstDelete(rootRef, K);
        List<Integer> outKeys = new ArrayList<>();
        List<Character> outColors = new ArrayList<>();
        levelOrder(rootRef[0], outKeys, outColors);
        for (int i = 0; i < outKeys.size(); i++) {
            System.out.print(outKeys.get(i));
            if (i != outKeys.size() - 1) System.out.print(" ");
        }
        System.out.println();
        for (int i = 0; i < outColors.size(); i++) {
            System.out.print(outColors.get(i));
            if (i != outColors.size() - 1) System.out.print(" ");
        }
        System.out.println();
    }
}