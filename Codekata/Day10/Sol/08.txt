import java.util.*;

class TrieNode {
    TrieNode[] children = new TrieNode[26];
    String word = null;
}

public class Main {
    static int m, n;
    static char[][] board;
    static List<String> result = new ArrayList<>();
    static int[] dx = {0, 0, 1, -1};
    static int[] dy = {1, -1, 0, 0};

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        m = sc.nextInt();
        n = sc.nextInt();
        board = new char[m][n];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                board[i][j] = sc.next().charAt(0);
        int k = sc.nextInt();
        String[] words = new String[k];
        for (int i = 0; i < k; i++)
            words[i] = sc.next();
        List<String> found = findWords(board, words);
        for (String w : found)
            System.out.println(w);
    }

    public static List<String> findWords(char[][] board, String[] words) {
        TrieNode root = buildTrie(words);
        Set<String> foundWords = new HashSet<>();
        int m = board.length, n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                dfs(board, i, j, root, visited, foundWords);
        return new ArrayList<>(foundWords);
    }

    private static void dfs(char[][] board, int i, int j, TrieNode node, boolean[][] visited, Set<String> foundWords) {
        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j])
            return;
        char c = board[i][j];
        TrieNode next = node.children[c - 'a'];
        if (next == null)
            return;
        if (next.word != null) {
            foundWords.add(next.word);
            next.word = null; // avoid duplicate
        }
        visited[i][j] = true;
        for (int d = 0; d < 4; d++)
            dfs(board, i + dx[d], j + dy[d], next, visited, foundWords);
        visited[i][j] = false;
    }

    private static TrieNode buildTrie(String[] words) {
        TrieNode root = new TrieNode();
        for (String w : words) {
            TrieNode node = root;
            for (char c : w.toCharArray()) {
                int idx = c - 'a';
                if (node.children[idx] == null)
                    node.children[idx] = new TrieNode();
                node = node.children[idx];
            }
            node.word = w;
        }
        return root;
    }
}