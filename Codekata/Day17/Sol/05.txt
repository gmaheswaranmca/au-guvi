import java.util.*;

public class BellmanFordShortestPath {
    static class Edge {
        int u, v;
        long w;
        Edge(int u, int v, long w) {
            this.u = u;
            this.v = v;
            this.w = w;
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt(), M = sc.nextInt(), S = sc.nextInt();
        List<Edge> edges = new ArrayList<>();
        for (int i = 0; i < M; i++) {
            int u = sc.nextInt(), v = sc.nextInt();
            long w = sc.nextLong();
            edges.add(new Edge(u, v, w));
        }
        long[] dist = new long[N];
        Arrays.fill(dist, Long.MAX_VALUE);
        dist[S] = 0;

        // Bellman-Ford main loop
        for (int i = 0; i < N - 1; i++) {
            boolean updated = false;
            for (Edge e : edges) {
                if (dist[e.u] != Long.MAX_VALUE && dist[e.u] + e.w < dist[e.v]) {
                    dist[e.v] = dist[e.u] + e.w;
                    updated = true;
                }
            }
            if (!updated) break;
        }

        // Check for negative cycle
        for (Edge e : edges) {
            if (dist[e.u] != Long.MAX_VALUE && dist[e.u] + e.w < dist[e.v]) {
                System.out.println("NEGATIVE CYCLE");
                return;
            }
        }

        for (int i = 0; i < N; i++) {
            if (dist[i] == Long.MAX_VALUE) System.out.print("INF");
            else System.out.print(dist[i]);
            if (i < N - 1) System.out.print(" ");
        }
        System.out.println();
    }
}