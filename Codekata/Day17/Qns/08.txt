Prompt 
    Base Question - "Shortest Path Faster Algorithm (SPFA)", "Implement the SPFA algorithm to find the shortest paths from a source node in a graph with negative weights.", "Hard", "Codeforces, ByteDance"
    Give me full coding question for the above base question in the below format:
    Problem title, Proble Description, Input format, Output format,
    Constraints, Sample Input / Ouput / Explanation,
    Difficulty, 
    Five Test Cases 
----------------------------------
Problem Title:
Shortest Path Faster Algorithm (SPFA)

Problem Description:
Given a directed weighted graph with N nodes and M edges, some of which may have negative weights (but no negative cycles), implement the Shortest Path Faster Algorithm (SPFA) to find the shortest distances from a given source node S to all other nodes. If a node is unreachable from the source, output -1 for that node.

Input Format:
- The first line contains three integers N, M, and S: the number of nodes, the number of edges, and the source node (1-based indexing).
- The next M lines each contain three integers u, v, and w, representing a directed edge from node u to node v with weight w.

Output Format:
- Output N space-separated integers, where the i-th integer is the shortest distance from S to node i (1-based). If node i is unreachable from S, output -1 for that node.

Constraints:
- 1 ≤ N ≤ 10^4
- 1 ≤ M ≤ 5×10^4
- 1 ≤ S ≤ N
- 1 ≤ u, v ≤ N
- -10^4 ≤ w ≤ 10^4
- The graph does not contain negative weight cycles.

Sample Input:
5 7 1
1 2 2
1 3 4
2 3 -1
2 4 2
3 5 3
4 5 -2
5 4 1

Sample Output:
0 2 1 4 2

Explanation:
- The shortest path from 1 to 1 is 0.
- The shortest path from 1 to 2 is 2.
- The shortest path from 1 to 3 is 1 (1->2->3).
- The shortest path from 1 to 4 is 4 (1->2->4).
- The shortest path from 1 to 5 is 2 (1->2->4->5).

Difficulty:
Hard

Five Test Cases:
Test Case 1:
Input:
3 3 1
1 2 5
2 3 -2
1 3 4
Output:
0 5 3

Test Case 2:
Input:
4 4 2
2 1 1
2 3 2
3 4 -1
4 2 3
Output:
1 0 2 1

Test Case 3:
Input:
5 4 3
3 1 2
3 2 3
1 4 1
2 5 4
Output:
2 3 0 3 7

Test Case 4:
Input:
4 2 1
1 2 1
3 4 2
Output:
0 1 -1 -1

Test Case 5:
Input:
6 8 6
6 1 2
6 2 4
1 3 1
2 3 -2
3 4 3
4 5 -1
5 6 2
2 5 5
Output:
2 4 2 5 4 0
