"Course Schedule Ordering",
"Given a list of courses and prerequisites, 
return a valid order to complete all courses using topological sorting.",
"Medium", 
"LeetCode, Facebook, Coursera"
 
----------------------------------

Problem Title:
Course Schedule Ordering

Problem Description:
You are given a total of `n` courses labeled from 0 to n-1. Some courses may have prerequisites, represented as a list of prerequisite pairs. Each pair [a, b] indicates that to take course `a`, you must first complete course `b`. Your task is to determine a valid order in which to complete all the courses. If it is not possible to finish all courses due to a cycle (i.e., circular dependency), return an empty list.

Input Format:
- The first line contains an integer `n`, the total number of courses.
- The second line contains an integer `m`, the number of prerequisite pairs.
- The next `m` lines each contain two integers `a` and `b`, representing a prerequisite pair [a, b].

Output Format:
- Print a list of integers representing a valid order to complete all courses.
- If there is no valid order, print an empty list.

Constraints:
- 1 <= n <= 10^5
- 0 <= m <= 10^5
- 0 <= a, b < n

Sample Input:
4
4
1 0
2 0
3 1
3 2

Sample Output:
[0, 1, 2, 3]

Explanation:
To take course 1, you must first take course 0. To take course 2, you must first take course 0. To take course 3, you must first take courses 1 and 2. One possible order is [0, 1, 2, 3].

Difficulty:
Medium

Five Test Cases:
Test Case 1:
Input:
2
1
1 0
Output:
[0, 1]

Test Case 2:
Input:
2
1
0 1
Output:
[1, 0]

Test Case 3:
Input:
2
2
0 1
1 0
Output:
[]

Test Case 4:
Input:
3
0
Output:
[0, 1, 2]

Test Case 5:
Input:
5
4
1 0
2 0
3 1
4 3
Output:
[0, 1, 2, 3, 4]

----------------------------------

